# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for Clerk::OrganizationsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "OrganizationsApi" do
  describe "test an instance of OrganizationsApi" do
    it "should create an instance of OrganizationsApi" do
      api_instance = Clerk::OrganizationsApi.new
      # TODO expect(api_instance).to be_instance_of(Clerk::OrganizationsApi)
    end
  end

  # unit tests for create_organization
  # Create an organization
  # Creates a new organization with the given name for an instance. You can specify an optional slug for the new organization. If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash \&quot;-\&quot;. Organization slugs must be unique for the instance. You can provide additional metadata for the organization and set any custom attribute you want. Organizations support private and public metadata. Private metadata can only be accessed from the Backend API. Public metadata can be accessed from the Backend API, and are read-only from the Frontend API. The &#x60;created_by&#x60; user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization) the next time they create a session, presuming they don&#39;t explicitly set a different organization as active before then.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateOrganizationRequest] :create_organization_request 
  # @return [Organization]
  describe "create_organization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_organization
  # Delete an organization
  # Deletes the given organization. Please note that deleting an organization will also delete all memberships and invitations. This is not reversible.
  # @param organization_id The ID of the organization to delete
  # @param [Hash] opts the optional parameters
  # @return [DeletedObject]
  describe "delete_organization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_organization_logo
  # Delete the organization&#39;s logo.
  # Delete the organization&#39;s logo.
  # @param organization_id The ID of the organization for which the logo will be deleted.
  # @param [Hash] opts the optional parameters
  # @return [Organization]
  describe "delete_organization_logo test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_organization
  # Retrieve an organization by ID or slug
  # Fetches the organization whose ID or slug matches the provided &#x60;id_or_slug&#x60; URL query parameter.
  # @param organization_id The ID or slug of the organization
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :include_members_count Flag to denote whether or not the organization&#39;s members count should be included in the response.
  # @option opts [Bool] :include_missing_member_with_elevated_permissions Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization.
  # @return [Organization]
  describe "get_organization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for list_organizations
  # Get a list of organizations for an instance
  # This request returns the list of organizations for an instance. Results can be paginated using the optional &#x60;limit&#x60; and &#x60;offset&#x60; query parameters. The organizations are ordered by descending creation date. Most recent organizations will be returned first.
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :include_members_count Flag to denote whether the member counts of each organization should be included in the response or not.
  # @option opts [Bool] :include_missing_member_with_elevated_permissions Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization.
  # @option opts [String] :query Returns organizations with ID, name, or slug that match the given query. Uses exact match for organization ID and partial match for name and slug.
  # @option opts [Array(String)] :user_id Returns organizations with the user ids specified. Any user ids not found are ignored. For each user id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective organization should be included or excluded from the result set.
  # @option opts [Array(String)] :organization_id Returns organizations with the organization ids specified. Any organization ids not found are ignored. For each organization id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective organization should be included or excluded from the result set. Accepts up to 100 organization ids. Example: ?organization_id&#x3D;+org_1&amp;organization_id&#x3D;-org_2
  # @option opts [String] :order_by Allows to return organizations in a particular order. At the moment, you can order the returned organizations either by their &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;members_count&#x60;. In order to specify the direction, you can use the &#x60;+/-&#x60; symbols prepended in the property to order by. For example, if you want organizations to be returned in descending order according to their &#x60;created_at&#x60; property, you can use &#x60;-created_at&#x60;. If you don&#39;t use &#x60;+&#x60; or &#x60;-&#x60;, then &#x60;+&#x60; is implied. Defaults to &#x60;-created_at&#x60;.
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @return [Organizations]
  describe "list_organizations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for merge_organization_metadata
  # Merge and update metadata for an organization
  # Update organization metadata attributes by merging existing values with the provided parameters. Metadata values will be updated via a deep merge. Deep meaning that any nested JSON objects will be merged as well. You can remove metadata keys at any level by setting their value to &#x60;null&#x60;.
  # @param organization_id The ID of the organization for which metadata will be merged or updated
  # @param merge_organization_metadata_request 
  # @param [Hash] opts the optional parameters
  # @return [Organization]
  describe "merge_organization_metadata test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_organization
  # Update an organization
  # Updates an existing organization
  # @param organization_id The ID of the organization to update
  # @param update_organization_request 
  # @param [Hash] opts the optional parameters
  # @return [Organization]
  describe "update_organization test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for upload_organization_logo
  # Upload a logo for the organization
  # Set or replace an organization&#39;s logo, by uploading an image file. This endpoint uses the &#x60;multipart/form-data&#x60; request content type and accepts a file of image type. The file size cannot exceed 10MB. Only the following file content types are supported: &#x60;image/jpeg&#x60;, &#x60;image/png&#x60;, &#x60;image/gif&#x60;, &#x60;image/webp&#x60;, &#x60;image/x-icon&#x60;, &#x60;image/vnd.microsoft.icon&#x60;.
  # @param organization_id The ID of the organization for which to upload a logo
  # @param file 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :uploader_user_id The ID of the user that will be credited with the image upload.
  # @return [OrganizationWithLogo]
  describe "upload_organization_logo test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
