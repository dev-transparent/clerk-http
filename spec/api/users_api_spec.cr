# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for Clerk::UsersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "UsersApi" do
  describe "test an instance of UsersApi" do
    it "should create an instance of UsersApi" do
      api_instance = Clerk::UsersApi.new
      # TODO expect(api_instance).to be_instance_of(Clerk::UsersApi)
    end
  end

  # unit tests for ban_user
  # Ban a user
  # Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
  # @param user_id The ID of the user to ban
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe "ban_user test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_user
  # Create a new user
  # Creates a new user. Your user management settings determine how you should setup your user model.  Any email address and phone number created using this method will be marked as verified.  Note: If you are performing a migration, check out our guide on [zero downtime migrations](https://clerk.com/docs/deployments/migrate-overview).  A rate limit rule of 20 requests per 10 seconds is applied to this endpoint.
  # @param create_user_request 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe "create_user test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_backup_code
  # Disable all user&#39;s Backup codes
  # Disable all of a user&#39;s backup codes.
  # @param user_id The ID of the user whose backup codes are to be deleted.
  # @param [Hash] opts the optional parameters
  # @return [DisableMFA200Response]
  describe "delete_backup_code test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_external_account
  # Delete External Account
  # Delete an external account by ID.
  # @param user_id The ID of the user&#39;s external account
  # @param external_account_id The ID of the external account to delete
  # @param [Hash] opts the optional parameters
  # @return [DeletedObject]
  describe "delete_external_account test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_totp
  # Delete all the user&#39;s TOTPs
  # Deletes all of the user&#39;s TOTPs.
  # @param user_id The ID of the user whose TOTPs are to be deleted
  # @param [Hash] opts the optional parameters
  # @return [DisableMFA200Response]
  describe "delete_totp test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_user
  # Delete a user
  # Delete the specified user
  # @param user_id The ID of the user to delete
  # @param [Hash] opts the optional parameters
  # @return [DeletedObject]
  describe "delete_user test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_user_profile_image
  # Delete user profile image
  # Delete a user&#39;s profile image
  # @param user_id The ID of the user to delete the profile image for
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe "delete_user_profile_image test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for disable_mfa
  # Disable a user&#39;s MFA methods
  # Disable all of a user&#39;s MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.
  # @param user_id The ID of the user whose MFA methods are to be disabled
  # @param [Hash] opts the optional parameters
  # @return [DisableMFA200Response]
  describe "disable_mfa test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_o_auth_access_token
  # Retrieve the OAuth access token of a user
  # Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider. For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.
  # @param user_id The ID of the user for which to retrieve the OAuth access token
  # @param provider The ID of the OAuth provider (e.g. &#x60;oauth_google&#x60;)
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :paginated Whether to paginate the results. If true, the results will be paginated. If false, the results will not be paginated.
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @return [Array(OAuthAccessTokenInner)]
  describe "get_o_auth_access_token test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_user
  # Retrieve a user
  # Retrieve the details of a user
  # @param user_id The ID of the user to retrieve
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe "get_user test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_user_list
  # List all users
  # Returns a list of all users. The users are returned sorted by creation date, with the newest users appearing first.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :email_address Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
  # @option opts [Array(String)] :phone_number Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
  # @option opts [Array(String)] :external_id Returns users with the specified external ids. For each external id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective external id should be included or excluded from the result set. Accepts up to 100 external ids. Any external ids not found are ignored.
  # @option opts [Array(String)] :username Returns users with the specified usernames. Accepts up to 100 usernames. Any usernames not found are ignored.
  # @option opts [Array(String)] :web3_wallet Returns users with the specified web3 wallet addresses. Accepts up to 100 web3 wallet addresses. Any web3 wallet addressed not found are ignored.
  # @option opts [Array(String)] :user_id Returns users with the user ids specified. For each user id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective user id should be included or excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
  # @option opts [Array(String)] :organization_id Returns users that have memberships to the given organizations. For each organization id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective organization should be included or excluded from the result set. Accepts up to 100 organization ids.
  # @option opts [String] :query Returns users that match the given query. For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names. The query value doesn&#39;t need to match the exact value you are looking for, it is capable of partial matches as well.
  # @option opts [String] :email_address_query Returns users with emails that match the given query, via case-insensitive partial match. For example, &#x60;email_address_query&#x3D;ello&#x60; will match a user with the email &#x60;HELLO@example.com&#x60;.
  # @option opts [String] :phone_number_query Returns users with phone numbers that match the given query, via case-insensitive partial match. For example, &#x60;phone_number_query&#x3D;555&#x60; will match a user with the phone number &#x60;+1555xxxxxxx&#x60;.
  # @option opts [String] :username_query Returns users with usernames that match the given query, via case-insensitive partial match. For example, &#x60;username_query&#x3D;CoolUser&#x60; will match a user with the username &#x60;SomeCoolUser&#x60;.
  # @option opts [String] :name_query Returns users with names that match the given query, via case-insensitive partial match.
  # @option opts [Bool] :banned Returns users which are either banned (&#x60;banned&#x3D;true&#x60;) or not banned (&#x60;banned&#x3D;false&#x60;).
  # @option opts [Int32] :last_active_at_before Returns users whose last session activity was before the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
  # @option opts [Int32] :last_active_at_after Returns users whose last session activity was after the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
  # @option opts [Int32] :last_active_at_since Returns users that had session activity since the given date. Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day. Deprecated in favor of &#x60;last_active_at_after&#x60;.
  # @option opts [Int32] :created_at_before Returns users who have been created before the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
  # @option opts [Int32] :created_at_after Returns users who have been created after the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @option opts [String] :order_by Allows to return users in a particular order. At the moment, you can order the returned users by their &#x60;created_at&#x60;,&#x60;updated_at&#x60;,&#x60;email_address&#x60;,&#x60;web3wallet&#x60;,&#x60;first_name&#x60;,&#x60;last_name&#x60;,&#x60;phone_number&#x60;,&#x60;username&#x60;,&#x60;last_active_at&#x60;,&#x60;last_sign_in_at&#x60;. In order to specify the direction, you can use the &#x60;+/-&#x60; symbols prepended in the property to order by. For example, if you want users to be returned in descending order according to their &#x60;created_at&#x60; property, you can use &#x60;-created_at&#x60;. If you don&#39;t use &#x60;+&#x60; or &#x60;-&#x60;, then &#x60;+&#x60; is implied. We only support one &#x60;order_by&#x60; parameter, and if multiple &#x60;order_by&#x60; parameters are provided, we will only keep the first one. For example, if you pass &#x60;order_by&#x3D;username&amp;order_by&#x3D;created_at&#x60;, we will consider only the first &#x60;order_by&#x60; parameter, which is &#x60;username&#x60;. The &#x60;created_at&#x60; parameter will be ignored in this case.
  # @return [Array(User)]
  describe "get_user_list test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_users_count
  # Count users
  # Returns a total count of all users that match the given filtering criteria.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(String)] :email_address Counts users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
  # @option opts [Array(String)] :phone_number Counts users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
  # @option opts [Array(String)] :external_id Counts users with the specified external ids. Accepts up to 100 external ids. Any external ids not found are ignored.
  # @option opts [Array(String)] :username Counts users with the specified usernames. Accepts up to 100 usernames. Any usernames not found are ignored.
  # @option opts [Array(String)] :web3_wallet Counts users with the specified web3 wallet addresses. Accepts up to 100 web3 wallet addresses. Any web3 wallet addressed not found are ignored.
  # @option opts [Array(String)] :user_id Counts users with the user ids specified. Accepts up to 100 user ids. Any user ids not found are ignored.
  # @option opts [Array(String)] :organization_id Returns users that have memberships to the given organizations. For each organization id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective organization should be included or excluded from the result set. Accepts up to 100 organization ids.
  # @option opts [String] :query Counts users that match the given query. For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names. The query value doesn&#39;t need to match the exact value you are looking for, it is capable of partial matches as well.
  # @option opts [String] :email_address_query Counts users with emails that match the given query, via case-insensitive partial match. For example, &#x60;email_address_query&#x3D;ello&#x60; will match a user with the email &#x60;HELLO@example.com&#x60;, and will be included in the resulting count.
  # @option opts [String] :phone_number_query Counts users with phone numbers that match the given query, via case-insensitive partial match. For example, &#x60;phone_number_query&#x3D;555&#x60; will match a user with the phone number &#x60;+1555xxxxxxx&#x60;, and will be included in the resulting count.
  # @option opts [String] :username_query Counts users with usernames that match the given query, via case-insensitive partial match. For example, &#x60;username_query&#x3D;CoolUser&#x60; will match a user with the username &#x60;SomeCoolUser&#x60;, and will be included in the resulting count.
  # @option opts [String] :name_query Returns users with names that match the given query, via case-insensitive partial match.
  # @option opts [Bool] :banned Counts users which are either banned (&#x60;banned&#x3D;true&#x60;) or not banned (&#x60;banned&#x3D;false&#x60;).
  # @option opts [Int32] :last_active_at_before Returns users whose last session activity was before the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
  # @option opts [Int32] :last_active_at_after Returns users whose last session activity was after the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
  # @option opts [Int32] :last_active_at_since Returns users that had session activity since the given date. Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day. Deprecated in favor of &#x60;last_active_at_after&#x60;.
  # @option opts [Int32] :created_at_before Returns users who have been created before the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
  # @option opts [Int32] :created_at_after Returns users who have been created after the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
  # @return [TotalCount]
  describe "get_users_count test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for lock_user
  # Lock a user
  # Marks the given user as locked, which means they are not allowed to sign in again until the lock expires. Lock duration can be configured in the instance&#39;s restrictions settings.
  # @param user_id The ID of the user to lock
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe "lock_user test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for set_user_profile_image
  # Set user profile image
  # Update a user&#39;s profile image
  # @param user_id The ID of the user to update the profile image for
  # @param [Hash] opts the optional parameters
  # @option opts [::File] :file 
  # @return [User]
  describe "set_user_profile_image test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for unban_user
  # Unban a user
  # Removes the ban mark from the given user.
  # @param user_id The ID of the user to unban
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe "unban_user test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for unlock_user
  # Unlock a user
  # Removes the lock from the given user.
  # @param user_id The ID of the user to unlock
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe "unlock_user test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_user
  # Update a user
  # Update a user&#39;s attributes.  You can set the user&#39;s primary contact identifiers (email address and phone numbers) by updating the &#x60;primary_email_address_id&#x60; and &#x60;primary_phone_number_id&#x60; attributes respectively. Both IDs should correspond to verified identifications that belong to the user.  You can remove a user&#39;s username by setting the username attribute to null or the blank string \&quot;\&quot;. This is a destructive action; the identification will be deleted forever. Usernames can be removed only if they are optional in your instance settings and there&#39;s at least one other identifier which can be used for authentication.  This endpoint allows changing a user&#39;s password. When passing the &#x60;password&#x60; parameter directly you have two further options. You can ignore the password policy checks for your instance by setting the &#x60;skip_password_checks&#x60; parameter to &#x60;true&#x60;. You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set &#x60;sign_out_of_other_sessions&#x60; to &#x60;true&#x60;.
  # @param user_id The ID of the user to update
  # @param update_user_request 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe "update_user test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_user_metadata
  # Merge and update a user&#39;s metadata
  # Update a user&#39;s metadata attributes by merging existing values with the provided parameters.  This endpoint behaves differently than the *Update a user* endpoint. Metadata values will not be replaced entirely. Instead, a deep merge will be performed. Deep means that any nested JSON objects will be merged as well.  You can remove metadata keys at any level by setting their value to &#x60;null&#x60;.
  # @param user_id The ID of the user whose metadata will be updated and merged
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateUserMetadataRequest] :update_user_metadata_request 
  # @return [User]
  describe "update_user_metadata test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for user_passkey_delete
  # Delete a user passkey
  # Delete the passkey identification for a given user and notify them through email.
  # @param user_id The ID of the user that owns the passkey identity
  # @param passkey_identification_id The ID of the passkey identity to be deleted
  # @param [Hash] opts the optional parameters
  # @return [DeletedObject]
  describe "user_passkey_delete test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for user_web3_wallet_delete
  # Delete a user web3 wallet
  # Delete the web3 wallet identification for a given user.
  # @param user_id The ID of the user that owns the web3 wallet
  # @param web3_wallet_identification_id The ID of the web3 wallet identity to be deleted
  # @param [Hash] opts the optional parameters
  # @return [DeletedObject]
  describe "user_web3_wallet_delete test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for users_get_organization_invitations
  # Retrieve all invitations for a user
  # Retrieve a paginated list of the user&#39;s organization invitations
  # @param user_id The ID of the user whose organization invitations we want to retrieve
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @option opts [String] :status Filter organization invitations based on their status
  # @return [OrganizationInvitationsWithPublicOrganizationData]
  describe "users_get_organization_invitations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for users_get_organization_memberships
  # Retrieve all memberships for a user
  # Retrieve a paginated list of the user&#39;s organization memberships
  # @param user_id The ID of the user whose organization memberships we want to retrieve
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @return [OrganizationMemberships]
  describe "users_get_organization_memberships test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for verify_password
  # Verify the password of a user
  # Check that the user&#39;s password matches the supplied input. Useful for custom auth flows and re-verification.
  # @param user_id The ID of the user for whom to verify the password
  # @param [Hash] opts the optional parameters
  # @option opts [VerifyPasswordRequest] :verify_password_request 
  # @return [VerifyPassword200Response]
  describe "verify_password test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for verify_totp
  # Verify a TOTP or backup code for a user
  # Verify that the provided TOTP or backup code is valid for the user. Verifying a backup code will result it in being consumed (i.e. it will become invalid). Useful for custom auth flows and re-verification.
  # @param user_id The ID of the user for whom to verify the TOTP
  # @param [Hash] opts the optional parameters
  # @option opts [VerifyTOTPRequest] :verify_totp_request 
  # @return [VerifyTOTP200Response]
  describe "verify_totp test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
