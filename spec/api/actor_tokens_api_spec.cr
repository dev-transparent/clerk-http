# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for Clerk::ActorTokensApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "ActorTokensApi" do
  describe "test an instance of ActorTokensApi" do
    it "should create an instance of ActorTokensApi" do
      api_instance = Clerk::ActorTokensApi.new
      # TODO expect(api_instance).to be_instance_of(Clerk::ActorTokensApi)
    end
  end

  # unit tests for create_actor_token
  # Create actor token
  # Create an actor token that can be used to impersonate the given user. The &#x60;actor&#x60; parameter needs to include at least a \&quot;sub\&quot; key whose value is the ID of the actor (impersonating) user.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateActorTokenRequest] :create_actor_token_request 
  # @return [ActorToken]
  describe "create_actor_token test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for revoke_actor_token
  # Revoke actor token
  # Revokes a pending actor token.
  # @param actor_token_id The ID of the actor token to be revoked.
  # @param [Hash] opts the optional parameters
  # @return [ActorToken]
  describe "revoke_actor_token test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
