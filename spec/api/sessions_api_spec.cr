# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for Clerk::SessionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "SessionsApi" do
  describe "test an instance of SessionsApi" do
    it "should create an instance of SessionsApi" do
      api_instance = Clerk::SessionsApi.new
      # TODO expect(api_instance).to be_instance_of(Clerk::SessionsApi)
    end
  end

  # unit tests for create_session
  # Create a new active session
  # Create a new active session for the provided user ID.  **This operation is intended only for use in testing, and is not available for production instances.** If you are looking to generate a user session from the backend, we recommend using the [Sign-in Tokens](https://clerk.com/docs/reference/backend-api/tag/Sign-in-Tokens#operation/CreateSignInToken) resource instead.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateSessionRequest] :create_session_request 
  # @return [Session]
  describe "create_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_session_token
  # Create a session token
  # Creates a session JSON Web Token (JWT) based on a session.
  # @param session_id The ID of the session
  # @param [Hash] opts the optional parameters
  # @option opts [CreateSessionTokenRequest] :create_session_token_request 
  # @return [CreateSessionToken200Response]
  describe "create_session_token test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_session_token_from_template
  # Create a session token from a jwt template
  # Creates a JSON Web Token(JWT) based on a session and a JWT Template name defined for your instance
  # @param session_id The ID of the session
  # @param template_name The name of the JWT Template defined in your instance (e.g. &#x60;custom_hasura&#x60;).
  # @param [Hash] opts the optional parameters
  # @option opts [CreateSessionTokenFromTemplateRequest] :create_session_token_from_template_request 
  # @return [CreateSessionToken200Response]
  describe "create_session_token_from_template test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_session
  # Retrieve a session
  # Retrieve the details of a session
  # @param session_id The ID of the session
  # @param [Hash] opts the optional parameters
  # @return [Session]
  describe "get_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_session_list
  # List all sessions
  # Returns a list of all sessions. The sessions are returned sorted by creation date, with the newest sessions appearing first. **Deprecation Notice (2024-01-01):** All parameters were initially considered optional, however moving forward at least one of &#x60;client_id&#x60; or &#x60;user_id&#x60; parameters should be provided.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :client_id List sessions for the given client
  # @option opts [String] :user_id List sessions for the given user
  # @option opts [String] :status Filter sessions by the provided status
  # @option opts [Bool] :paginated Whether to paginate the results. If true, the results will be paginated. If false, the results will not be paginated.
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @return [Array(Session)]
  describe "get_session_list test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for refresh_session
  # Refresh a session
  # Refreshes a session by creating a new session token. A 401 is returned when there are validation errors, which signals the SDKs to fallback to the handshake flow.
  # @param session_id The ID of the session
  # @param [Hash] opts the optional parameters
  # @option opts [RefreshSessionRequest] :refresh_session_request Refresh session parameters
  # @return [SessionRefresh]
  describe "refresh_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for revoke_session
  # Revoke a session
  # Sets the status of a session as \&quot;revoked\&quot;, which is an unauthenticated state. In multi-session mode, a revoked session will still be returned along with its client object, however the user will need to sign in again.
  # @param session_id The ID of the session
  # @param [Hash] opts the optional parameters
  # @return [Session]
  describe "revoke_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for verify_session
  # Verify a session
  # Returns the session if it is authenticated, otherwise returns an error. WARNING: This endpoint is deprecated and will be removed in future versions. We strongly recommend switching to networkless verification using short-lived session tokens,          which is implemented transparently in all recent SDK versions (e.g. [NodeJS SDK](https://clerk.com/docs/backend-requests/handling/nodejs#clerk-express-require-auth)).          For more details on how networkless verification works, refer to our [Session Tokens documentation](https://clerk.com/docs/backend-requests/resources/session-tokens).
  # @param session_id The ID of the session
  # @param [Hash] opts the optional parameters
  # @option opts [VerifySessionRequest] :verify_session_request Parameters.
  # @return [Session]
  describe "verify_session test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
