# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for Clerk::InvitationsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "InvitationsApi" do
  describe "test an instance of InvitationsApi" do
    it "should create an instance of InvitationsApi" do
      api_instance = Clerk::InvitationsApi.new
      # TODO expect(api_instance).to be_instance_of(Clerk::InvitationsApi)
    end
  end

  # unit tests for create_bulk_invitations
  # Create multiple invitations
  # Use this API operation to create multiple invitations for the provided email addresses. You can choose to send the invitations as emails by setting the &#x60;notify&#x60; parameter to &#x60;true&#x60;. There cannot be an existing invitation for any of the email addresses you provide unless you set &#x60;ignore_existing&#x60; to &#x60;true&#x60; for specific email addresses. Please note that there must be no existing user for any of the email addresses you provide, and this rule cannot be bypassed.
  # @param [Hash] opts the optional parameters
  # @option opts [Array(CreateBulkInvitationsRequestInner)] :create_bulk_invitations_request_inner Required parameters
  # @return [Array(Invitation)]
  describe "create_bulk_invitations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_invitation
  # Create an invitation
  # Creates a new invitation for the given email address and sends the invitation email. Keep in mind that you cannot create an invitation if there is already one for the given email address. Also, trying to create an invitation for an email address that already exists in your application will result to an error.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateInvitationRequest] :create_invitation_request Required parameters
  # @return [Invitation]
  describe "create_invitation test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for list_invitations
  # List all invitations
  # Returns all non-revoked invitations for your application, sorted by creation date
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Filter invitations based on their status
  # @option opts [String] :query Filter invitations based on their &#x60;email_address&#x60; or &#x60;id&#x60;
  # @option opts [String] :order_by Allows to return organizations in a particular order. At the moment, you can order the returned organizations either by their &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;members_count&#x60;. In order to specify the direction, you can use the &#x60;+/-&#x60; symbols prepended in the property to order by. For example, if you want organizations to be returned in descending order according to their &#x60;created_at&#x60; property, you can use &#x60;-created_at&#x60;. If you don&#39;t use &#x60;+&#x60; or &#x60;-&#x60;, then &#x60;+&#x60; is implied.
  # @option opts [Bool] :paginated Whether to paginate the results. If true, the results will be paginated. If false, the results will not be paginated.
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @return [Array(Invitation)]
  describe "list_invitations test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for revoke_invitation
  # Revokes an invitation
  # Revokes the given invitation. Revoking an invitation will prevent the user from using the invitation link that was sent to them. However, it doesn&#39;t prevent the user from signing up if they follow the sign up flow. Only active (i.e. non-revoked) invitations can be revoked.
  # @param invitation_id The ID of the invitation to be revoked
  # @param [Hash] opts the optional parameters
  # @return [RevokeInvitation200Response]
  describe "revoke_invitation test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
