# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for Clerk::OrganizationMembershipsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "OrganizationMembershipsApi" do
  describe "test an instance of OrganizationMembershipsApi" do
    it "should create an instance of OrganizationMembershipsApi" do
      api_instance = Clerk::OrganizationMembershipsApi.new
      # TODO expect(api_instance).to be_instance_of(Clerk::OrganizationMembershipsApi)
    end
  end

  # unit tests for create_organization_membership
  # Create a new organization membership
  # Adds a user as a member to the given organization. Only users in the same instance as the organization can be added as members.  This organization will be the user&#39;s [active organization] (https://clerk.com/docs/organizations/overview#active-organization) the next time they create a session, presuming they don&#39;t explicitly set a different organization as active before then.
  # @param organization_id The ID of the organization where the new membership will be created
  # @param create_organization_membership_request 
  # @param [Hash] opts the optional parameters
  # @return [OrganizationMembership]
  describe "create_organization_membership test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_organization_membership
  # Remove a member from an organization
  # Removes the given membership from the organization
  # @param organization_id The ID of the organization the membership belongs to
  # @param user_id The ID of the user that this membership belongs to
  # @param [Hash] opts the optional parameters
  # @return [OrganizationMembership]
  describe "delete_organization_membership test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for instance_get_organization_memberships
  # Get a list of all organization memberships within an instance.
  # Retrieves all organization user memberships for the given instance.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :order_by Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username. By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order.
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @return [OrganizationMemberships]
  describe "instance_get_organization_memberships test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for list_organization_memberships
  # Get a list of all members of an organization
  # Retrieves all user memberships for the given organization
  # @param organization_id The organization ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :order_by Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username. By prepending one of those values with + or -, we can choose to sort in ascending (ASC) or descending (DESC) order.\&quot;
  # @option opts [Array(String)] :user_id Returns users with the user ids specified. For each user id, the &#x60;+&#x60; and &#x60;-&#x60; can be prepended to the id, which denote whether the respective user id should be included or excluded from the result set. Accepts up to 100 user ids. Any user ids not found are ignored.
  # @option opts [Array(String)] :email_address Returns users with the specified email addresses. Accepts up to 100 email addresses. Any email addresses not found are ignored.
  # @option opts [Array(String)] :phone_number Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
  # @option opts [Array(String)] :username Returns users with the specified usernames. Accepts up to 100 usernames. Any usernames not found are ignored.
  # @option opts [Array(String)] :web3_wallet Returns users with the specified web3 wallet addresses. Accepts up to 100 web3 wallet addresses. Any web3 wallet addressed not found are ignored.
  # @option opts [Array(String)] :role Returns users with the specified roles. Accepts up to 100 roles. Any roles not found are ignored.
  # @option opts [String] :query Returns users that match the given query. For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names. The query value doesn&#39;t need to match the exact value you are looking for, it is capable of partial matches as well.
  # @option opts [String] :email_address_query Returns users with emails that match the given query, via case-insensitive partial match. For example, &#x60;email_address_query&#x3D;ello&#x60; will match a user with the email &#x60;HELLO@example.com&#x60;.
  # @option opts [String] :phone_number_query Returns users with phone numbers that match the given query, via case-insensitive partial match. For example, &#x60;phone_number_query&#x3D;555&#x60; will match a user with the phone number &#x60;+1555xxxxxxx&#x60;.
  # @option opts [String] :username_query Returns users with usernames that match the given query, via case-insensitive partial match. For example, &#x60;username_query&#x3D;CoolUser&#x60; will match a user with the username &#x60;SomeCoolUser&#x60;.
  # @option opts [String] :name_query Returns users with names that match the given query, via case-insensitive partial match.
  # @option opts [Int32] :last_active_at_before Returns users whose last session activity was before the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was before 2023-11-23.
  # @option opts [Int32] :last_active_at_after Returns users whose last session activity was after the given date (with millisecond precision). Example: use 1700690400000 to retrieve users whose last session activity was after 2023-11-23.
  # @option opts [Int32] :created_at_before Returns users who have been created before the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created before 2024-10-29.
  # @option opts [Int32] :created_at_after Returns users who have been created after the given date (with millisecond precision). Example: use 1730160000000 to retrieve users who have been created after 2024-10-29.
  # @option opts [Int32] :limit Applies a limit to the number of results returned. Can be used for paginating the results together with &#x60;offset&#x60;.
  # @option opts [Int32] :offset Skip the first &#x60;offset&#x60; results when paginating. Needs to be an integer greater or equal to zero. To be used in conjunction with &#x60;limit&#x60;.
  # @return [OrganizationMemberships]
  describe "list_organization_memberships test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_organization_membership
  # Update an organization membership
  # Updates the properties of an existing organization membership
  # @param organization_id The ID of the organization the membership belongs to
  # @param user_id The ID of the user that this membership belongs to
  # @param update_organization_membership_request 
  # @param [Hash] opts the optional parameters
  # @return [OrganizationMembership]
  describe "update_organization_membership test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_organization_membership_metadata
  # Merge and update organization membership metadata
  # Update an organization membership&#39;s metadata attributes by merging existing values with the provided parameters. Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be merged as well. You can remove metadata keys at any level by setting their value to &#x60;null&#x60;.
  # @param organization_id The ID of the organization the membership belongs to
  # @param user_id The ID of the user that this membership belongs to
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateOrganizationMembershipMetadataRequest] :update_organization_membership_metadata_request 
  # @return [OrganizationMembership]
  describe "update_organization_membership_metadata test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
