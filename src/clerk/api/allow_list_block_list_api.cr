# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class AllowListBlockListApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add identifier to the allow-list
    # Create an identifier allowed to sign up to an instance
    # @return [AllowlistIdentifier]
    def create_allowlist_identifier(create_allowlist_identifier_request : CreateAllowlistIdentifierRequest?)
      data, _status_code, _headers = create_allowlist_identifier_with_http_info(create_allowlist_identifier_request)
      data
    end

    # Add identifier to the allow-list
    # Create an identifier allowed to sign up to an instance
    # @return [Array<(AllowlistIdentifier, Integer, Hash)>] AllowlistIdentifier data, response status code and response headers
    def create_allowlist_identifier_with_http_info(create_allowlist_identifier_request : CreateAllowlistIdentifierRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AllowListBlockListApi.create_allowlist_identifier ..."}
      end
      # resource path
      local_var_path = "/allowlist_identifiers"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_allowlist_identifier_request.to_json

      # return_type
      return_type = "AllowlistIdentifier"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AllowListBlockListApi.create_allowlist_identifier",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AllowListBlockListApi#create_allowlist_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AllowlistIdentifier.from_json(data), status_code, headers
    end

    # Add identifier to the block-list
    # Create an identifier that is blocked from accessing an instance
    # @return [BlocklistIdentifier]
    def create_blocklist_identifier(create_blocklist_identifier_request : CreateBlocklistIdentifierRequest?)
      data, _status_code, _headers = create_blocklist_identifier_with_http_info(create_blocklist_identifier_request)
      data
    end

    # Add identifier to the block-list
    # Create an identifier that is blocked from accessing an instance
    # @return [Array<(BlocklistIdentifier, Integer, Hash)>] BlocklistIdentifier data, response status code and response headers
    def create_blocklist_identifier_with_http_info(create_blocklist_identifier_request : CreateBlocklistIdentifierRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AllowListBlockListApi.create_blocklist_identifier ..."}
      end
      # resource path
      local_var_path = "/blocklist_identifiers"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_blocklist_identifier_request.to_json

      # return_type
      return_type = "BlocklistIdentifier"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AllowListBlockListApi.create_blocklist_identifier",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AllowListBlockListApi#create_blocklist_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BlocklistIdentifier.from_json(data), status_code, headers
    end

    # Delete identifier from allow-list
    # Delete an identifier from the instance allow-list
    # @param identifier_id [String] The ID of the identifier to delete from the allow-list
    # @return [DeletedObject]
    def delete_allowlist_identifier(identifier_id : String)
      data, _status_code, _headers = delete_allowlist_identifier_with_http_info(identifier_id)
      data
    end

    # Delete identifier from allow-list
    # Delete an identifier from the instance allow-list
    # @param identifier_id [String] The ID of the identifier to delete from the allow-list
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_allowlist_identifier_with_http_info(identifier_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AllowListBlockListApi.delete_allowlist_identifier ..."}
      end
      # verify the required parameter "identifier_id" is set
      if @api_client.config.client_side_validation && identifier_id.nil?
        raise ArgumentError.new("Missing the required parameter 'identifier_id' when calling AllowListBlockListApi.delete_allowlist_identifier")
      end
      # resource path
      local_var_path = "/allowlist_identifiers/{identifier_id}".sub("{" + "identifier_id" + "}", URI.encode_path(identifier_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AllowListBlockListApi.delete_allowlist_identifier",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AllowListBlockListApi#delete_allowlist_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Delete identifier from block-list
    # Delete an identifier from the instance block-list
    # @param identifier_id [String] The ID of the identifier to delete from the block-list
    # @return [DeletedObject]
    def delete_blocklist_identifier(identifier_id : String)
      data, _status_code, _headers = delete_blocklist_identifier_with_http_info(identifier_id)
      data
    end

    # Delete identifier from block-list
    # Delete an identifier from the instance block-list
    # @param identifier_id [String] The ID of the identifier to delete from the block-list
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_blocklist_identifier_with_http_info(identifier_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AllowListBlockListApi.delete_blocklist_identifier ..."}
      end
      # verify the required parameter "identifier_id" is set
      if @api_client.config.client_side_validation && identifier_id.nil?
        raise ArgumentError.new("Missing the required parameter 'identifier_id' when calling AllowListBlockListApi.delete_blocklist_identifier")
      end
      # resource path
      local_var_path = "/blocklist_identifiers/{identifier_id}".sub("{" + "identifier_id" + "}", URI.encode_path(identifier_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AllowListBlockListApi.delete_blocklist_identifier",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AllowListBlockListApi#delete_blocklist_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # List all identifiers on the allow-list
    # Get a list of all identifiers allowed to sign up to an instance
    # @return [Array(AllowlistIdentifier)]
    def list_allowlist_identifiers(paginated : Bool?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_allowlist_identifiers_with_http_info(paginated, limit, offset)
      data
    end

    # List all identifiers on the allow-list
    # Get a list of all identifiers allowed to sign up to an instance
    # @return [Array<(Array(AllowlistIdentifier), Integer, Hash)>] Array(AllowlistIdentifier) data, response status code and response headers
    def list_allowlist_identifiers_with_http_info(paginated : Bool?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AllowListBlockListApi.list_allowlist_identifiers ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling AllowListBlockListApi.list_allowlist_identifiers, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling AllowListBlockListApi.list_allowlist_identifiers, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling AllowListBlockListApi.list_allowlist_identifiers, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/allowlist_identifiers"

      # query parameters
      query_params = Hash(String, String).new
      query_params["paginated"] = paginated.to_s unless paginated.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(AllowlistIdentifier)"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AllowListBlockListApi.list_allowlist_identifiers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AllowListBlockListApi#list_allowlist_identifiers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(AllowlistIdentifier).from_json(data), status_code, headers
    end

    # List all identifiers on the block-list
    # Get a list of all identifiers which are not allowed to access an instance
    # @return [BlocklistIdentifiers]
    def list_blocklist_identifiers()
      data, _status_code, _headers = list_blocklist_identifiers_with_http_info()
      data
    end

    # List all identifiers on the block-list
    # Get a list of all identifiers which are not allowed to access an instance
    # @return [Array<(BlocklistIdentifiers, Integer, Hash)>] BlocklistIdentifiers data, response status code and response headers
    def list_blocklist_identifiers_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: AllowListBlockListApi.list_blocklist_identifiers ..."}
      end
      # resource path
      local_var_path = "/blocklist_identifiers"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "BlocklistIdentifiers"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AllowListBlockListApi.list_blocklist_identifiers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AllowListBlockListApi#list_blocklist_identifiers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BlocklistIdentifiers.from_json(data), status_code, headers
    end
  end
end
