# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class OrganizationsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an organization
    # Creates a new organization with the given name for an instance. You can specify an optional slug for the new organization. If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash \"-\". Organization slugs must be unique for the instance. You can provide additional metadata for the organization and set any custom attribute you want. Organizations support private and public metadata. Private metadata can only be accessed from the Backend API. Public metadata can be accessed from the Backend API, and are read-only from the Frontend API. The `created_by` user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization) the next time they create a session, presuming they don't explicitly set a different organization as active before then.
    # @return [Organization]
    def create_organization(create_organization_request : CreateOrganizationRequest?)
      data, _status_code, _headers = create_organization_with_http_info(create_organization_request)
      data
    end

    # Create an organization
    # Creates a new organization with the given name for an instance. You can specify an optional slug for the new organization. If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash \&quot;-\&quot;. Organization slugs must be unique for the instance. You can provide additional metadata for the organization and set any custom attribute you want. Organizations support private and public metadata. Private metadata can only be accessed from the Backend API. Public metadata can be accessed from the Backend API, and are read-only from the Frontend API. The &#x60;created_by&#x60; user will see this as their [active organization] (https://clerk.com/docs/organizations/overview#active-organization) the next time they create a session, presuming they don&#39;t explicitly set a different organization as active before then.
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def create_organization_with_http_info(create_organization_request : CreateOrganizationRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationsApi.create_organization ..."}
      end
      # resource path
      local_var_path = "/organizations"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_organization_request.to_json

      # return_type
      return_type = "Organization"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"OrganizationsApi.create_organization",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationsApi#create_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Organization.from_json(data), status_code, headers
    end

    # Delete an organization
    # Deletes the given organization. Please note that deleting an organization will also delete all memberships and invitations. This is not reversible.
    # @param organization_id [String] The ID of the organization to delete
    # @return [DeletedObject]
    def delete_organization(organization_id : String)
      data, _status_code, _headers = delete_organization_with_http_info(organization_id)
      data
    end

    # Delete an organization
    # Deletes the given organization. Please note that deleting an organization will also delete all memberships and invitations. This is not reversible.
    # @param organization_id [String] The ID of the organization to delete
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_organization_with_http_info(organization_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationsApi.delete_organization ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationsApi.delete_organization")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"OrganizationsApi.delete_organization",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationsApi#delete_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Delete the organization's logo.
    # Delete the organization's logo.
    # @param organization_id [String] The ID of the organization for which the logo will be deleted.
    # @return [Organization]
    def delete_organization_logo(organization_id : String)
      data, _status_code, _headers = delete_organization_logo_with_http_info(organization_id)
      data
    end

    # Delete the organization&#39;s logo.
    # Delete the organization&#39;s logo.
    # @param organization_id [String] The ID of the organization for which the logo will be deleted.
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def delete_organization_logo_with_http_info(organization_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationsApi.delete_organization_logo ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationsApi.delete_organization_logo")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/logo".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Organization"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"OrganizationsApi.delete_organization_logo",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationsApi#delete_organization_logo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Organization.from_json(data), status_code, headers
    end

    # Retrieve an organization by ID or slug
    # Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.
    # @param organization_id [String] The ID or slug of the organization
    # @return [Organization]
    def get_organization(organization_id : String, include_members_count : Bool?, include_missing_member_with_elevated_permissions : Bool?)
      data, _status_code, _headers = get_organization_with_http_info(organization_id, include_members_count, include_missing_member_with_elevated_permissions)
      data
    end

    # Retrieve an organization by ID or slug
    # Fetches the organization whose ID or slug matches the provided &#x60;id_or_slug&#x60; URL query parameter.
    # @param organization_id [String] The ID or slug of the organization
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def get_organization_with_http_info(organization_id : String, include_members_count : Bool?, include_missing_member_with_elevated_permissions : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationsApi.get_organization ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationsApi.get_organization")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["include_members_count"] = include_members_count.to_s unless include_members_count.nil?
      query_params["include_missing_member_with_elevated_permissions"] = include_missing_member_with_elevated_permissions.to_s unless include_missing_member_with_elevated_permissions.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Organization"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OrganizationsApi.get_organization",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationsApi#get_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Organization.from_json(data), status_code, headers
    end

    # Get a list of organizations for an instance
    # This request returns the list of organizations for an instance. Results can be paginated using the optional `limit` and `offset` query parameters. The organizations are ordered by descending creation date. Most recent organizations will be returned first.
    # @return [Organizations]
    def list_organizations(include_members_count : Bool?, include_missing_member_with_elevated_permissions : Bool?, query : String?, user_id : Array(String)?, organization_id : Array(String)?, order_by : String?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_organizations_with_http_info(include_members_count, include_missing_member_with_elevated_permissions, query, user_id, organization_id, order_by, limit, offset)
      data
    end

    # Get a list of organizations for an instance
    # This request returns the list of organizations for an instance. Results can be paginated using the optional &#x60;limit&#x60; and &#x60;offset&#x60; query parameters. The organizations are ordered by descending creation date. Most recent organizations will be returned first.
    # @return [Array<(Organizations, Integer, Hash)>] Organizations data, response status code and response headers
    def list_organizations_with_http_info(include_members_count : Bool?, include_missing_member_with_elevated_permissions : Bool?, query : String?, user_id : Array(String)?, organization_id : Array(String)?, order_by : String?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationsApi.list_organizations ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationsApi.list_organizations, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationsApi.list_organizations, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling OrganizationsApi.list_organizations, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/organizations"

      # query parameters
      query_params = Hash(String, String).new
      query_params["include_members_count"] = include_members_count.to_s unless include_members_count.nil?
      query_params["include_missing_member_with_elevated_permissions"] = include_missing_member_with_elevated_permissions.to_s unless include_missing_member_with_elevated_permissions.nil?
      query_params["query"] = query.to_s unless query.nil?
      query_params["user_id"] = @api_client.build_collection_param(user_id, :multi)
      query_params["organization_id"] = @api_client.build_collection_param(organization_id, :multi)
      query_params["order_by"] = order_by.to_s unless order_by.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Organizations"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OrganizationsApi.list_organizations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationsApi#list_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Organizations.from_json(data), status_code, headers
    end

    # Merge and update metadata for an organization
    # Update organization metadata attributes by merging existing values with the provided parameters. Metadata values will be updated via a deep merge. Deep meaning that any nested JSON objects will be merged as well. You can remove metadata keys at any level by setting their value to `null`.
    # @param organization_id [String] The ID of the organization for which metadata will be merged or updated
    # @param merge_organization_metadata_request [MergeOrganizationMetadataRequest] 
    # @return [Organization]
    def merge_organization_metadata(organization_id : String, merge_organization_metadata_request : MergeOrganizationMetadataRequest)
      data, _status_code, _headers = merge_organization_metadata_with_http_info(organization_id, merge_organization_metadata_request)
      data
    end

    # Merge and update metadata for an organization
    # Update organization metadata attributes by merging existing values with the provided parameters. Metadata values will be updated via a deep merge. Deep meaning that any nested JSON objects will be merged as well. You can remove metadata keys at any level by setting their value to &#x60;null&#x60;.
    # @param organization_id [String] The ID of the organization for which metadata will be merged or updated
    # @param merge_organization_metadata_request [MergeOrganizationMetadataRequest] 
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def merge_organization_metadata_with_http_info(organization_id : String, merge_organization_metadata_request : MergeOrganizationMetadataRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationsApi.merge_organization_metadata ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationsApi.merge_organization_metadata")
      end
      # verify the required parameter "merge_organization_metadata_request" is set
      if @api_client.config.client_side_validation && merge_organization_metadata_request.nil?
        raise ArgumentError.new("Missing the required parameter 'merge_organization_metadata_request' when calling OrganizationsApi.merge_organization_metadata")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/metadata".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = merge_organization_metadata_request.to_json

      # return_type
      return_type = "Organization"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"OrganizationsApi.merge_organization_metadata",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationsApi#merge_organization_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Organization.from_json(data), status_code, headers
    end

    # Update an organization
    # Updates an existing organization
    # @param organization_id [String] The ID of the organization to update
    # @param update_organization_request [UpdateOrganizationRequest] 
    # @return [Organization]
    def update_organization(organization_id : String, update_organization_request : UpdateOrganizationRequest)
      data, _status_code, _headers = update_organization_with_http_info(organization_id, update_organization_request)
      data
    end

    # Update an organization
    # Updates an existing organization
    # @param organization_id [String] The ID of the organization to update
    # @param update_organization_request [UpdateOrganizationRequest] 
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def update_organization_with_http_info(organization_id : String, update_organization_request : UpdateOrganizationRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationsApi.update_organization ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationsApi.update_organization")
      end
      # verify the required parameter "update_organization_request" is set
      if @api_client.config.client_side_validation && update_organization_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_organization_request' when calling OrganizationsApi.update_organization")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_organization_request.to_json

      # return_type
      return_type = "Organization"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"OrganizationsApi.update_organization",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationsApi#update_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Organization.from_json(data), status_code, headers
    end

    # Upload a logo for the organization
    # Set or replace an organization's logo, by uploading an image file. This endpoint uses the `multipart/form-data` request content type and accepts a file of image type. The file size cannot exceed 10MB. Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.
    # @param organization_id [String] The ID of the organization for which to upload a logo
    # @param file [::File] 
    # @return [OrganizationWithLogo]
    def upload_organization_logo(organization_id : String, file : ::File, uploader_user_id : String?)
      data, _status_code, _headers = upload_organization_logo_with_http_info(organization_id, file, uploader_user_id)
      data
    end

    # Upload a logo for the organization
    # Set or replace an organization&#39;s logo, by uploading an image file. This endpoint uses the &#x60;multipart/form-data&#x60; request content type and accepts a file of image type. The file size cannot exceed 10MB. Only the following file content types are supported: &#x60;image/jpeg&#x60;, &#x60;image/png&#x60;, &#x60;image/gif&#x60;, &#x60;image/webp&#x60;, &#x60;image/x-icon&#x60;, &#x60;image/vnd.microsoft.icon&#x60;.
    # @param organization_id [String] The ID of the organization for which to upload a logo
    # @param file [::File] 
    # @return [Array<(OrganizationWithLogo, Integer, Hash)>] OrganizationWithLogo data, response status code and response headers
    def upload_organization_logo_with_http_info(organization_id : String, file : ::File, uploader_user_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationsApi.upload_organization_logo ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationsApi.upload_organization_logo")
      end
      # verify the required parameter "file" is set
      if @api_client.config.client_side_validation && file.nil?
        raise ArgumentError.new("Missing the required parameter 'file' when calling OrganizationsApi.upload_organization_logo")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/logo".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"uploader_user_id"] = uploader_user_id unless uploader_user_id.nil?
      form_params[:"file"] = file unless file.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OrganizationWithLogo"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"OrganizationsApi.upload_organization_logo",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationsApi#upload_organization_logo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationWithLogo.from_json(data), status_code, headers
    end
  end
end
