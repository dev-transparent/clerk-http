# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class SignInTokensApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create sign-in token
    # Creates a new sign-in token and associates it with the given user. By default, sign-in tokens expire in 30 days. You can optionally supply a different duration in seconds using the `expires_in_seconds` property.
    # @return [SignInToken]
    def create_sign_in_token(create_sign_in_token_request : CreateSignInTokenRequest?)
      data, _status_code, _headers = create_sign_in_token_with_http_info(create_sign_in_token_request)
      data
    end

    # Create sign-in token
    # Creates a new sign-in token and associates it with the given user. By default, sign-in tokens expire in 30 days. You can optionally supply a different duration in seconds using the &#x60;expires_in_seconds&#x60; property.
    # @return [Array<(SignInToken, Integer, Hash)>] SignInToken data, response status code and response headers
    def create_sign_in_token_with_http_info(create_sign_in_token_request : CreateSignInTokenRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SignInTokensApi.create_sign_in_token ..."}
      end
      # resource path
      local_var_path = "/sign_in_tokens"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_sign_in_token_request.to_json

      # return_type
      return_type = "SignInToken"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"SignInTokensApi.create_sign_in_token",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SignInTokensApi#create_sign_in_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SignInToken.from_json(data), status_code, headers
    end

    # Revoke the given sign-in token
    # Revokes a pending sign-in token
    # @param sign_in_token_id [String] The ID of the sign-in token to be revoked
    # @return [SignInToken]
    def revoke_sign_in_token(sign_in_token_id : String)
      data, _status_code, _headers = revoke_sign_in_token_with_http_info(sign_in_token_id)
      data
    end

    # Revoke the given sign-in token
    # Revokes a pending sign-in token
    # @param sign_in_token_id [String] The ID of the sign-in token to be revoked
    # @return [Array<(SignInToken, Integer, Hash)>] SignInToken data, response status code and response headers
    def revoke_sign_in_token_with_http_info(sign_in_token_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SignInTokensApi.revoke_sign_in_token ..."}
      end
      # verify the required parameter "sign_in_token_id" is set
      if @api_client.config.client_side_validation && sign_in_token_id.nil?
        raise ArgumentError.new("Missing the required parameter 'sign_in_token_id' when calling SignInTokensApi.revoke_sign_in_token")
      end
      # resource path
      local_var_path = "/sign_in_tokens/{sign_in_token_id}/revoke".sub("{" + "sign_in_token_id" + "}", URI.encode_path(sign_in_token_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SignInToken"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"SignInTokensApi.revoke_sign_in_token",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SignInTokensApi#revoke_sign_in_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SignInToken.from_json(data), status_code, headers
    end
  end
end
