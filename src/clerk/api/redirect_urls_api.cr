# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class RedirectURLsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a redirect URL
    # Create a redirect URL
    # @return [RedirectURL]
    def create_redirect_url(create_redirect_url_request : CreateRedirectURLRequest?)
      data, _status_code, _headers = create_redirect_url_with_http_info(create_redirect_url_request)
      data
    end

    # Create a redirect URL
    # Create a redirect URL
    # @return [Array<(RedirectURL, Integer, Hash)>] RedirectURL data, response status code and response headers
    def create_redirect_url_with_http_info(create_redirect_url_request : CreateRedirectURLRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RedirectURLsApi.create_redirect_url ..."}
      end
      # resource path
      local_var_path = "/redirect_urls"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_redirect_url_request.to_json

      # return_type
      return_type = "RedirectURL"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RedirectURLsApi.create_redirect_url",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RedirectURLsApi#create_redirect_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RedirectURL.from_json(data), status_code, headers
    end

    # Delete a redirect URL
    # Remove the selected redirect URL from the whitelist of the instance
    # @param id [String] The ID of the redirect URL
    # @return [DeletedObject]
    def delete_redirect_url(id : String)
      data, _status_code, _headers = delete_redirect_url_with_http_info(id)
      data
    end

    # Delete a redirect URL
    # Remove the selected redirect URL from the whitelist of the instance
    # @param id [String] The ID of the redirect URL
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_redirect_url_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RedirectURLsApi.delete_redirect_url ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling RedirectURLsApi.delete_redirect_url")
      end
      # resource path
      local_var_path = "/redirect_urls/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"RedirectURLsApi.delete_redirect_url",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RedirectURLsApi#delete_redirect_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Retrieve a redirect URL
    # Retrieve the details of the redirect URL with the given ID
    # @param id [String] The ID of the redirect URL
    # @return [RedirectURL]
    def get_redirect_url(id : String)
      data, _status_code, _headers = get_redirect_url_with_http_info(id)
      data
    end

    # Retrieve a redirect URL
    # Retrieve the details of the redirect URL with the given ID
    # @param id [String] The ID of the redirect URL
    # @return [Array<(RedirectURL, Integer, Hash)>] RedirectURL data, response status code and response headers
    def get_redirect_url_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RedirectURLsApi.get_redirect_url ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling RedirectURLsApi.get_redirect_url")
      end
      # resource path
      local_var_path = "/redirect_urls/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "RedirectURL"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RedirectURLsApi.get_redirect_url",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RedirectURLsApi#get_redirect_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RedirectURL.from_json(data), status_code, headers
    end

    # List all redirect URLs
    # Lists all whitelisted redirect_urls for the instance
    # @return [Array(RedirectURL)]
    def list_redirect_urls(paginated : Bool?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_redirect_urls_with_http_info(paginated, limit, offset)
      data
    end

    # List all redirect URLs
    # Lists all whitelisted redirect_urls for the instance
    # @return [Array<(Array(RedirectURL), Integer, Hash)>] Array(RedirectURL) data, response status code and response headers
    def list_redirect_urls_with_http_info(paginated : Bool?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RedirectURLsApi.list_redirect_urls ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling RedirectURLsApi.list_redirect_urls, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling RedirectURLsApi.list_redirect_urls, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling RedirectURLsApi.list_redirect_urls, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/redirect_urls"

      # query parameters
      query_params = Hash(String, String).new
      query_params["paginated"] = paginated.to_s unless paginated.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(RedirectURL)"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RedirectURLsApi.list_redirect_urls",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RedirectURLsApi#list_redirect_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(RedirectURL).from_json(data), status_code, headers
    end
  end
end
