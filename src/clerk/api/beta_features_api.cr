# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class BetaFeaturesApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update production instance domain
    # Change the domain of a production instance.  Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection's redirect URLs and setting the new keys in your code.  WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.
    # @return [nil]
    def change_production_instance_domain(change_production_instance_domain_request : ChangeProductionInstanceDomainRequest?)
      change_production_instance_domain_with_http_info(change_production_instance_domain_request)
      nil
    end

    # Update production instance domain
    # Change the domain of a production instance.  Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection&#39;s redirect URLs and setting the new keys in your code.  WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def change_production_instance_domain_with_http_info(change_production_instance_domain_request : ChangeProductionInstanceDomainRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BetaFeaturesApi.change_production_instance_domain ..."}
      end
      # resource path
      local_var_path = "/instance/change_domain"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = change_production_instance_domain_request.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BetaFeaturesApi.change_production_instance_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BetaFeaturesApi#change_production_instance_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update instance settings
    # Updates the settings of an instance
    # @return [UpdateInstanceAuthConfig200Response]
    def update_instance_auth_config(update_instance_auth_config_request : UpdateInstanceAuthConfigRequest?)
      data, _status_code, _headers = update_instance_auth_config_with_http_info(update_instance_auth_config_request)
      data
    end

    # Update instance settings
    # Updates the settings of an instance
    # @return [Array<(UpdateInstanceAuthConfig200Response, Integer, Hash)>] UpdateInstanceAuthConfig200Response data, response status code and response headers
    def update_instance_auth_config_with_http_info(update_instance_auth_config_request : UpdateInstanceAuthConfigRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BetaFeaturesApi.update_instance_auth_config ..."}
      end
      # resource path
      local_var_path = "/beta_features/instance_settings"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_instance_auth_config_request.to_json

      # return_type
      return_type = "UpdateInstanceAuthConfig200Response"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"BetaFeaturesApi.update_instance_auth_config",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BetaFeaturesApi#update_instance_auth_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdateInstanceAuthConfig200Response.from_json(data), status_code, headers
    end

    # Update production instance domain
    # Change the domain of a production instance.  Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection's redirect URLs and setting the new keys in your code.  WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.
    # @return [nil]
    def update_production_instance_domain(update_production_instance_domain_request : UpdateProductionInstanceDomainRequest?)
      update_production_instance_domain_with_http_info(update_production_instance_domain_request)
      nil
    end

    # Update production instance domain
    # Change the domain of a production instance.  Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection&#39;s redirect URLs and setting the new keys in your code.  WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_production_instance_domain_with_http_info(update_production_instance_domain_request : UpdateProductionInstanceDomainRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BetaFeaturesApi.update_production_instance_domain ..."}
      end
      # resource path
      local_var_path = "/beta_features/domain"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_production_instance_domain_request.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"BetaFeaturesApi.update_production_instance_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BetaFeaturesApi#update_production_instance_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end
  end
end
