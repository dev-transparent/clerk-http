# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class OAuthApplicationsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an OAuth application
    # Creates a new OAuth application with the given name and callback URL for an instance. The callback URL must be a valid url. All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
    # @return [OAuthApplicationWithSecret]
    def create_o_auth_application(create_o_auth_application_request : CreateOAuthApplicationRequest?)
      data, _status_code, _headers = create_o_auth_application_with_http_info(create_o_auth_application_request)
      data
    end

    # Create an OAuth application
    # Creates a new OAuth application with the given name and callback URL for an instance. The callback URL must be a valid url. All URL schemes are allowed such as &#x60;http://&#x60;, &#x60;https://&#x60;, &#x60;myapp://&#x60;, etc...
    # @return [Array<(OAuthApplicationWithSecret, Integer, Hash)>] OAuthApplicationWithSecret data, response status code and response headers
    def create_o_auth_application_with_http_info(create_o_auth_application_request : CreateOAuthApplicationRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OAuthApplicationsApi.create_o_auth_application ..."}
      end
      # resource path
      local_var_path = "/oauth_applications"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_o_auth_application_request.to_json

      # return_type
      return_type = "OAuthApplicationWithSecret"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"OAuthApplicationsApi.create_o_auth_application",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OAuthApplicationsApi#create_o_auth_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OAuthApplicationWithSecret.from_json(data), status_code, headers
    end

    # Delete an OAuth application
    # Deletes the given OAuth application. This is not reversible.
    # @param oauth_application_id [String] The ID of the OAuth application to delete
    # @return [DeletedObject]
    def delete_o_auth_application(oauth_application_id : String)
      data, _status_code, _headers = delete_o_auth_application_with_http_info(oauth_application_id)
      data
    end

    # Delete an OAuth application
    # Deletes the given OAuth application. This is not reversible.
    # @param oauth_application_id [String] The ID of the OAuth application to delete
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_o_auth_application_with_http_info(oauth_application_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: OAuthApplicationsApi.delete_o_auth_application ..."}
      end
      # verify the required parameter "oauth_application_id" is set
      if @api_client.config.client_side_validation && oauth_application_id.nil?
        raise ArgumentError.new("Missing the required parameter 'oauth_application_id' when calling OAuthApplicationsApi.delete_o_auth_application")
      end
      # resource path
      local_var_path = "/oauth_applications/{oauth_application_id}".sub("{" + "oauth_application_id" + "}", URI.encode_path(oauth_application_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"OAuthApplicationsApi.delete_o_auth_application",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OAuthApplicationsApi#delete_o_auth_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Retrieve an OAuth application by ID
    # Fetches the OAuth application whose ID matches the provided `id` in the path.
    # @param oauth_application_id [String] The ID of the OAuth application
    # @return [OAuthApplication]
    def get_o_auth_application(oauth_application_id : String)
      data, _status_code, _headers = get_o_auth_application_with_http_info(oauth_application_id)
      data
    end

    # Retrieve an OAuth application by ID
    # Fetches the OAuth application whose ID matches the provided &#x60;id&#x60; in the path.
    # @param oauth_application_id [String] The ID of the OAuth application
    # @return [Array<(OAuthApplication, Integer, Hash)>] OAuthApplication data, response status code and response headers
    def get_o_auth_application_with_http_info(oauth_application_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: OAuthApplicationsApi.get_o_auth_application ..."}
      end
      # verify the required parameter "oauth_application_id" is set
      if @api_client.config.client_side_validation && oauth_application_id.nil?
        raise ArgumentError.new("Missing the required parameter 'oauth_application_id' when calling OAuthApplicationsApi.get_o_auth_application")
      end
      # resource path
      local_var_path = "/oauth_applications/{oauth_application_id}".sub("{" + "oauth_application_id" + "}", URI.encode_path(oauth_application_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OAuthApplication"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OAuthApplicationsApi.get_o_auth_application",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OAuthApplicationsApi#get_o_auth_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OAuthApplication.from_json(data), status_code, headers
    end

    # Get a list of OAuth applications for an instance
    # This request returns the list of OAuth applications for an instance. Results can be paginated using the optional `limit` and `offset` query parameters. The OAuth applications are ordered by descending creation date. Most recent OAuth applications will be returned first.
    # @return [OAuthApplications]
    def list_o_auth_applications(limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_o_auth_applications_with_http_info(limit, offset)
      data
    end

    # Get a list of OAuth applications for an instance
    # This request returns the list of OAuth applications for an instance. Results can be paginated using the optional &#x60;limit&#x60; and &#x60;offset&#x60; query parameters. The OAuth applications are ordered by descending creation date. Most recent OAuth applications will be returned first.
    # @return [Array<(OAuthApplications, Integer, Hash)>] OAuthApplications data, response status code and response headers
    def list_o_auth_applications_with_http_info(limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OAuthApplicationsApi.list_o_auth_applications ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling OAuthApplicationsApi.list_o_auth_applications, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OAuthApplicationsApi.list_o_auth_applications, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling OAuthApplicationsApi.list_o_auth_applications, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/oauth_applications"

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OAuthApplications"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OAuthApplicationsApi.list_o_auth_applications",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OAuthApplicationsApi#list_o_auth_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OAuthApplications.from_json(data), status_code, headers
    end

    # Rotate the client secret of the given OAuth application
    # Rotates the OAuth application's client secret. When the client secret is rotated, make sure to update it in authorized OAuth clients.
    # @param oauth_application_id [String] The ID of the OAuth application for which to rotate the client secret
    # @return [OAuthApplicationWithSecret]
    def rotate_o_auth_application_secret(oauth_application_id : String)
      data, _status_code, _headers = rotate_o_auth_application_secret_with_http_info(oauth_application_id)
      data
    end

    # Rotate the client secret of the given OAuth application
    # Rotates the OAuth application&#39;s client secret. When the client secret is rotated, make sure to update it in authorized OAuth clients.
    # @param oauth_application_id [String] The ID of the OAuth application for which to rotate the client secret
    # @return [Array<(OAuthApplicationWithSecret, Integer, Hash)>] OAuthApplicationWithSecret data, response status code and response headers
    def rotate_o_auth_application_secret_with_http_info(oauth_application_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: OAuthApplicationsApi.rotate_o_auth_application_secret ..."}
      end
      # verify the required parameter "oauth_application_id" is set
      if @api_client.config.client_side_validation && oauth_application_id.nil?
        raise ArgumentError.new("Missing the required parameter 'oauth_application_id' when calling OAuthApplicationsApi.rotate_o_auth_application_secret")
      end
      # resource path
      local_var_path = "/oauth_applications/{oauth_application_id}/rotate_secret".sub("{" + "oauth_application_id" + "}", URI.encode_path(oauth_application_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OAuthApplicationWithSecret"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"OAuthApplicationsApi.rotate_o_auth_application_secret",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OAuthApplicationsApi#rotate_o_auth_application_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OAuthApplicationWithSecret.from_json(data), status_code, headers
    end

    # Update an OAuth application
    # Updates an existing OAuth application
    # @param oauth_application_id [String] The ID of the OAuth application to update
    # @param update_o_auth_application_request [UpdateOAuthApplicationRequest] 
    # @return [OAuthApplication]
    def update_o_auth_application(oauth_application_id : String, update_o_auth_application_request : UpdateOAuthApplicationRequest)
      data, _status_code, _headers = update_o_auth_application_with_http_info(oauth_application_id, update_o_auth_application_request)
      data
    end

    # Update an OAuth application
    # Updates an existing OAuth application
    # @param oauth_application_id [String] The ID of the OAuth application to update
    # @param update_o_auth_application_request [UpdateOAuthApplicationRequest] 
    # @return [Array<(OAuthApplication, Integer, Hash)>] OAuthApplication data, response status code and response headers
    def update_o_auth_application_with_http_info(oauth_application_id : String, update_o_auth_application_request : UpdateOAuthApplicationRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: OAuthApplicationsApi.update_o_auth_application ..."}
      end
      # verify the required parameter "oauth_application_id" is set
      if @api_client.config.client_side_validation && oauth_application_id.nil?
        raise ArgumentError.new("Missing the required parameter 'oauth_application_id' when calling OAuthApplicationsApi.update_o_auth_application")
      end
      # verify the required parameter "update_o_auth_application_request" is set
      if @api_client.config.client_side_validation && update_o_auth_application_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_o_auth_application_request' when calling OAuthApplicationsApi.update_o_auth_application")
      end
      # resource path
      local_var_path = "/oauth_applications/{oauth_application_id}".sub("{" + "oauth_application_id" + "}", URI.encode_path(oauth_application_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_o_auth_application_request.to_json

      # return_type
      return_type = "OAuthApplication"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"OAuthApplicationsApi.update_o_auth_application",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OAuthApplicationsApi#update_o_auth_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OAuthApplication.from_json(data), status_code, headers
    end
  end
end
