# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class JWTTemplatesApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a JWT template
    # Create a new JWT template
    # @return [JWTTemplate]
    def create_jwt_template(create_jwt_template_request : CreateJWTTemplateRequest?)
      data, _status_code, _headers = create_jwt_template_with_http_info(create_jwt_template_request)
      data
    end

    # Create a JWT template
    # Create a new JWT template
    # @return [Array<(JWTTemplate, Integer, Hash)>] JWTTemplate data, response status code and response headers
    def create_jwt_template_with_http_info(create_jwt_template_request : CreateJWTTemplateRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: JWTTemplatesApi.create_jwt_template ..."}
      end
      # resource path
      local_var_path = "/jwt_templates"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_jwt_template_request.to_json

      # return_type
      return_type = "JWTTemplate"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"JWTTemplatesApi.create_jwt_template",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: JWTTemplatesApi#create_jwt_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JWTTemplate.from_json(data), status_code, headers
    end

    # Delete a Template
    # 
    # @param template_id [String] JWT Template ID
    # @return [DeletedObject]
    def delete_jwt_template(template_id : String)
      data, _status_code, _headers = delete_jwt_template_with_http_info(template_id)
      data
    end

    # Delete a Template
    # 
    # @param template_id [String] JWT Template ID
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_jwt_template_with_http_info(template_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: JWTTemplatesApi.delete_jwt_template ..."}
      end
      # verify the required parameter "template_id" is set
      if @api_client.config.client_side_validation && template_id.nil?
        raise ArgumentError.new("Missing the required parameter 'template_id' when calling JWTTemplatesApi.delete_jwt_template")
      end
      # resource path
      local_var_path = "/jwt_templates/{template_id}".sub("{" + "template_id" + "}", URI.encode_path(template_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"JWTTemplatesApi.delete_jwt_template",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: JWTTemplatesApi#delete_jwt_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Retrieve a template
    # Retrieve the details of a given JWT template
    # @param template_id [String] JWT Template ID
    # @return [JWTTemplate]
    def get_jwt_template(template_id : String)
      data, _status_code, _headers = get_jwt_template_with_http_info(template_id)
      data
    end

    # Retrieve a template
    # Retrieve the details of a given JWT template
    # @param template_id [String] JWT Template ID
    # @return [Array<(JWTTemplate, Integer, Hash)>] JWTTemplate data, response status code and response headers
    def get_jwt_template_with_http_info(template_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: JWTTemplatesApi.get_jwt_template ..."}
      end
      # verify the required parameter "template_id" is set
      if @api_client.config.client_side_validation && template_id.nil?
        raise ArgumentError.new("Missing the required parameter 'template_id' when calling JWTTemplatesApi.get_jwt_template")
      end
      # resource path
      local_var_path = "/jwt_templates/{template_id}".sub("{" + "template_id" + "}", URI.encode_path(template_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JWTTemplate"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"JWTTemplatesApi.get_jwt_template",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: JWTTemplatesApi#get_jwt_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JWTTemplate.from_json(data), status_code, headers
    end

    # List all templates
    # @return [Array(JWTTemplate)]
    def list_jwt_templates(paginated : Bool?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_jwt_templates_with_http_info(paginated, limit, offset)
      data
    end

    # List all templates
    # @return [Array<(Array(JWTTemplate), Integer, Hash)>] Array(JWTTemplate) data, response status code and response headers
    def list_jwt_templates_with_http_info(paginated : Bool?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: JWTTemplatesApi.list_jwt_templates ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling JWTTemplatesApi.list_jwt_templates, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling JWTTemplatesApi.list_jwt_templates, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling JWTTemplatesApi.list_jwt_templates, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/jwt_templates"

      # query parameters
      query_params = Hash(String, String).new
      query_params["paginated"] = paginated.to_s unless paginated.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(JWTTemplate)"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"JWTTemplatesApi.list_jwt_templates",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: JWTTemplatesApi#list_jwt_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(JWTTemplate).from_json(data), status_code, headers
    end

    # Update a JWT template
    # Updates an existing JWT template
    # @param template_id [String] The ID of the JWT template to update
    # @return [JWTTemplate]
    def update_jwt_template(template_id : String, create_jwt_template_request : CreateJWTTemplateRequest?)
      data, _status_code, _headers = update_jwt_template_with_http_info(template_id, create_jwt_template_request)
      data
    end

    # Update a JWT template
    # Updates an existing JWT template
    # @param template_id [String] The ID of the JWT template to update
    # @return [Array<(JWTTemplate, Integer, Hash)>] JWTTemplate data, response status code and response headers
    def update_jwt_template_with_http_info(template_id : String, create_jwt_template_request : CreateJWTTemplateRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: JWTTemplatesApi.update_jwt_template ..."}
      end
      # verify the required parameter "template_id" is set
      if @api_client.config.client_side_validation && template_id.nil?
        raise ArgumentError.new("Missing the required parameter 'template_id' when calling JWTTemplatesApi.update_jwt_template")
      end
      # resource path
      local_var_path = "/jwt_templates/{template_id}".sub("{" + "template_id" + "}", URI.encode_path(template_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_jwt_template_request.to_json

      # return_type
      return_type = "JWTTemplate"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"JWTTemplatesApi.update_jwt_template",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: JWTTemplatesApi#update_jwt_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JWTTemplate.from_json(data), status_code, headers
    end
  end
end
