# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class UsersApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Ban a user
    # Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
    # @param user_id [String] The ID of the user to ban
    # @return [User]
    def ban_user(user_id : String)
      data, _status_code, _headers = ban_user_with_http_info(user_id)
      data
    end

    # Ban a user
    # Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
    # @param user_id [String] The ID of the user to ban
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def ban_user_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.ban_user ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.ban_user")
      end
      # resource path
      local_var_path = "/users/{user_id}/ban".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UsersApi.ban_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#ban_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Create a new user
    # Creates a new user. Your user management settings determine how you should setup your user model.  Any email address and phone number created using this method will be marked as verified.  Note: If you are performing a migration, check out our guide on [zero downtime migrations](https://clerk.com/docs/deployments/migrate-overview).  A rate limit rule of 20 requests per 10 seconds is applied to this endpoint.
    # @param create_user_request [CreateUserRequest] 
    # @return [User]
    def create_user(create_user_request : CreateUserRequest)
      data, _status_code, _headers = create_user_with_http_info(create_user_request)
      data
    end

    # Create a new user
    # Creates a new user. Your user management settings determine how you should setup your user model.  Any email address and phone number created using this method will be marked as verified.  Note: If you are performing a migration, check out our guide on [zero downtime migrations](https://clerk.com/docs/deployments/migrate-overview).  A rate limit rule of 20 requests per 10 seconds is applied to this endpoint.
    # @param create_user_request [CreateUserRequest] 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def create_user_with_http_info(create_user_request : CreateUserRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.create_user ..."}
      end
      # verify the required parameter "create_user_request" is set
      if @api_client.config.client_side_validation && create_user_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_user_request' when calling UsersApi.create_user")
      end
      # resource path
      local_var_path = "/users"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_user_request.to_json

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UsersApi.create_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Disable all user's Backup codes
    # Disable all of a user's backup codes.
    # @param user_id [String] The ID of the user whose backup codes are to be deleted.
    # @return [DisableMFA200Response]
    def delete_backup_code(user_id : String)
      data, _status_code, _headers = delete_backup_code_with_http_info(user_id)
      data
    end

    # Disable all user&#39;s Backup codes
    # Disable all of a user&#39;s backup codes.
    # @param user_id [String] The ID of the user whose backup codes are to be deleted.
    # @return [Array<(DisableMFA200Response, Integer, Hash)>] DisableMFA200Response data, response status code and response headers
    def delete_backup_code_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.delete_backup_code ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.delete_backup_code")
      end
      # resource path
      local_var_path = "/users/{user_id}/backup_code".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DisableMFA200Response"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"UsersApi.delete_backup_code",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#delete_backup_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DisableMFA200Response.from_json(data), status_code, headers
    end

    # Delete External Account
    # Delete an external account by ID.
    # @param user_id [String] The ID of the user&#39;s external account
    # @param external_account_id [String] The ID of the external account to delete
    # @return [DeletedObject]
    def delete_external_account(user_id : String, external_account_id : String)
      data, _status_code, _headers = delete_external_account_with_http_info(user_id, external_account_id)
      data
    end

    # Delete External Account
    # Delete an external account by ID.
    # @param user_id [String] The ID of the user&#39;s external account
    # @param external_account_id [String] The ID of the external account to delete
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_external_account_with_http_info(user_id : String, external_account_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.delete_external_account ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.delete_external_account")
      end
      # verify the required parameter "external_account_id" is set
      if @api_client.config.client_side_validation && external_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'external_account_id' when calling UsersApi.delete_external_account")
      end
      # resource path
      local_var_path = "/users/{user_id}/external_accounts/{external_account_id}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s)).sub("{" + "external_account_id" + "}", URI.encode_path(external_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"UsersApi.delete_external_account",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#delete_external_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Delete all the user's TOTPs
    # Deletes all of the user's TOTPs.
    # @param user_id [String] The ID of the user whose TOTPs are to be deleted
    # @return [DisableMFA200Response]
    def delete_totp(user_id : String)
      data, _status_code, _headers = delete_totp_with_http_info(user_id)
      data
    end

    # Delete all the user&#39;s TOTPs
    # Deletes all of the user&#39;s TOTPs.
    # @param user_id [String] The ID of the user whose TOTPs are to be deleted
    # @return [Array<(DisableMFA200Response, Integer, Hash)>] DisableMFA200Response data, response status code and response headers
    def delete_totp_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.delete_totp ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.delete_totp")
      end
      # resource path
      local_var_path = "/users/{user_id}/totp".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DisableMFA200Response"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"UsersApi.delete_totp",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#delete_totp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DisableMFA200Response.from_json(data), status_code, headers
    end

    # Delete a user
    # Delete the specified user
    # @param user_id [String] The ID of the user to delete
    # @return [DeletedObject]
    def delete_user(user_id : String)
      data, _status_code, _headers = delete_user_with_http_info(user_id)
      data
    end

    # Delete a user
    # Delete the specified user
    # @param user_id [String] The ID of the user to delete
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_user_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.delete_user ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.delete_user")
      end
      # resource path
      local_var_path = "/users/{user_id}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"UsersApi.delete_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Delete user profile image
    # Delete a user's profile image
    # @param user_id [String] The ID of the user to delete the profile image for
    # @return [User]
    def delete_user_profile_image(user_id : String)
      data, _status_code, _headers = delete_user_profile_image_with_http_info(user_id)
      data
    end

    # Delete user profile image
    # Delete a user&#39;s profile image
    # @param user_id [String] The ID of the user to delete the profile image for
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def delete_user_profile_image_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.delete_user_profile_image ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.delete_user_profile_image")
      end
      # resource path
      local_var_path = "/users/{user_id}/profile_image".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"UsersApi.delete_user_profile_image",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#delete_user_profile_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Disable a user's MFA methods
    # Disable all of a user's MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.
    # @param user_id [String] The ID of the user whose MFA methods are to be disabled
    # @return [DisableMFA200Response]
    def disable_mfa(user_id : String)
      data, _status_code, _headers = disable_mfa_with_http_info(user_id)
      data
    end

    # Disable a user&#39;s MFA methods
    # Disable all of a user&#39;s MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.
    # @param user_id [String] The ID of the user whose MFA methods are to be disabled
    # @return [Array<(DisableMFA200Response, Integer, Hash)>] DisableMFA200Response data, response status code and response headers
    def disable_mfa_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.disable_mfa ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.disable_mfa")
      end
      # resource path
      local_var_path = "/users/{user_id}/mfa".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DisableMFA200Response"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"UsersApi.disable_mfa",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#disable_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DisableMFA200Response.from_json(data), status_code, headers
    end

    # Retrieve the OAuth access token of a user
    # Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider. For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.
    # @param user_id [String] The ID of the user for which to retrieve the OAuth access token
    # @param provider [String] The ID of the OAuth provider (e.g. &#x60;oauth_google&#x60;)
    # @return [Array(OAuthAccessTokenInner)]
    def get_o_auth_access_token(user_id : String, provider : String, paginated : Bool?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = get_o_auth_access_token_with_http_info(user_id, provider, paginated, limit, offset)
      data
    end

    # Retrieve the OAuth access token of a user
    # Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider. For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.
    # @param user_id [String] The ID of the user for which to retrieve the OAuth access token
    # @param provider [String] The ID of the OAuth provider (e.g. &#x60;oauth_google&#x60;)
    # @return [Array<(Array(OAuthAccessTokenInner), Integer, Hash)>] Array(OAuthAccessTokenInner) data, response status code and response headers
    def get_o_auth_access_token_with_http_info(user_id : String, provider : String, paginated : Bool?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.get_o_auth_access_token ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.get_o_auth_access_token")
      end
      # verify the required parameter "provider" is set
      if @api_client.config.client_side_validation && provider.nil?
        raise ArgumentError.new("Missing the required parameter 'provider' when calling UsersApi.get_o_auth_access_token")
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling UsersApi.get_o_auth_access_token, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling UsersApi.get_o_auth_access_token, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling UsersApi.get_o_auth_access_token, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/users/{user_id}/oauth_access_tokens/{provider}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s)).sub("{" + "provider" + "}", URI.encode_path(provider.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["paginated"] = paginated.to_s unless paginated.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(OAuthAccessTokenInner)"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UsersApi.get_o_auth_access_token",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#get_o_auth_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(OAuthAccessTokenInner).from_json(data), status_code, headers
    end

    # Retrieve a user
    # Retrieve the details of a user
    # @param user_id [String] The ID of the user to retrieve
    # @return [User]
    def get_user(user_id : String)
      data, _status_code, _headers = get_user_with_http_info(user_id)
      data
    end

    # Retrieve a user
    # Retrieve the details of a user
    # @param user_id [String] The ID of the user to retrieve
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.get_user ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.get_user")
      end
      # resource path
      local_var_path = "/users/{user_id}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UsersApi.get_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # List all users
    # Returns a list of all users. The users are returned sorted by creation date, with the newest users appearing first.
    # @return [Array(User)]
    def get_user_list(email_address : Array(String)?, phone_number : Array(String)?, external_id : Array(String)?, username : Array(String)?, web3_wallet : Array(String)?, user_id : Array(String)?, organization_id : Array(String)?, query : String?, email_address_query : String?, phone_number_query : String?, username_query : String?, name_query : String?, banned : Bool?, last_active_at_before : Int32?, last_active_at_after : Int32?, last_active_at_since : Int32?, created_at_before : Int32?, created_at_after : Int32?, limit : Int32?, offset : Int32?, order_by : String?)
      data, _status_code, _headers = get_user_list_with_http_info(email_address, phone_number, external_id, username, web3_wallet, user_id, organization_id, query, email_address_query, phone_number_query, username_query, name_query, banned, last_active_at_before, last_active_at_after, last_active_at_since, created_at_before, created_at_after, limit, offset, order_by)
      data
    end

    # List all users
    # Returns a list of all users. The users are returned sorted by creation date, with the newest users appearing first.
    # @return [Array<(Array(User), Integer, Hash)>] Array(User) data, response status code and response headers
    def get_user_list_with_http_info(email_address : Array(String)?, phone_number : Array(String)?, external_id : Array(String)?, username : Array(String)?, web3_wallet : Array(String)?, user_id : Array(String)?, organization_id : Array(String)?, query : String?, email_address_query : String?, phone_number_query : String?, username_query : String?, name_query : String?, banned : Bool?, last_active_at_before : Int32?, last_active_at_after : Int32?, last_active_at_since : Int32?, created_at_before : Int32?, created_at_after : Int32?, limit : Int32?, offset : Int32?, order_by : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.get_user_list ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling UsersApi.get_user_list, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling UsersApi.get_user_list, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling UsersApi.get_user_list, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/users"

      # query parameters
      query_params = Hash(String, String).new
      query_params["email_address"] = @api_client.build_collection_param(email_address, :multi)
      query_params["phone_number"] = @api_client.build_collection_param(phone_number, :multi)
      query_params["external_id"] = @api_client.build_collection_param(external_id, :multi)
      query_params["username"] = @api_client.build_collection_param(username, :multi)
      query_params["web3_wallet"] = @api_client.build_collection_param(web3_wallet, :multi)
      query_params["user_id"] = @api_client.build_collection_param(user_id, :multi)
      query_params["organization_id"] = @api_client.build_collection_param(organization_id, :multi)
      query_params["query"] = query.to_s unless query.nil?
      query_params["email_address_query"] = email_address_query.to_s unless email_address_query.nil?
      query_params["phone_number_query"] = phone_number_query.to_s unless phone_number_query.nil?
      query_params["username_query"] = username_query.to_s unless username_query.nil?
      query_params["name_query"] = name_query.to_s unless name_query.nil?
      query_params["banned"] = banned.to_s unless banned.nil?
      query_params["last_active_at_before"] = last_active_at_before.to_s unless last_active_at_before.nil?
      query_params["last_active_at_after"] = last_active_at_after.to_s unless last_active_at_after.nil?
      query_params["last_active_at_since"] = last_active_at_since.to_s unless last_active_at_since.nil?
      query_params["created_at_before"] = created_at_before.to_s unless created_at_before.nil?
      query_params["created_at_after"] = created_at_after.to_s unless created_at_after.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["order_by"] = order_by.to_s unless order_by.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(User)"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UsersApi.get_user_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#get_user_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(User).from_json(data), status_code, headers
    end

    # Count users
    # Returns a total count of all users that match the given filtering criteria.
    # @return [TotalCount]
    def get_users_count(email_address : Array(String)?, phone_number : Array(String)?, external_id : Array(String)?, username : Array(String)?, web3_wallet : Array(String)?, user_id : Array(String)?, organization_id : Array(String)?, query : String?, email_address_query : String?, phone_number_query : String?, username_query : String?, name_query : String?, banned : Bool?, last_active_at_before : Int32?, last_active_at_after : Int32?, last_active_at_since : Int32?, created_at_before : Int32?, created_at_after : Int32?)
      data, _status_code, _headers = get_users_count_with_http_info(email_address, phone_number, external_id, username, web3_wallet, user_id, organization_id, query, email_address_query, phone_number_query, username_query, name_query, banned, last_active_at_before, last_active_at_after, last_active_at_since, created_at_before, created_at_after)
      data
    end

    # Count users
    # Returns a total count of all users that match the given filtering criteria.
    # @return [Array<(TotalCount, Integer, Hash)>] TotalCount data, response status code and response headers
    def get_users_count_with_http_info(email_address : Array(String)?, phone_number : Array(String)?, external_id : Array(String)?, username : Array(String)?, web3_wallet : Array(String)?, user_id : Array(String)?, organization_id : Array(String)?, query : String?, email_address_query : String?, phone_number_query : String?, username_query : String?, name_query : String?, banned : Bool?, last_active_at_before : Int32?, last_active_at_after : Int32?, last_active_at_since : Int32?, created_at_before : Int32?, created_at_after : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.get_users_count ..."}
      end
      # resource path
      local_var_path = "/users/count"

      # query parameters
      query_params = Hash(String, String).new
      query_params["email_address"] = @api_client.build_collection_param(email_address, :multi)
      query_params["phone_number"] = @api_client.build_collection_param(phone_number, :multi)
      query_params["external_id"] = @api_client.build_collection_param(external_id, :multi)
      query_params["username"] = @api_client.build_collection_param(username, :multi)
      query_params["web3_wallet"] = @api_client.build_collection_param(web3_wallet, :multi)
      query_params["user_id"] = @api_client.build_collection_param(user_id, :multi)
      query_params["organization_id"] = @api_client.build_collection_param(organization_id, :multi)
      query_params["query"] = query.to_s unless query.nil?
      query_params["email_address_query"] = email_address_query.to_s unless email_address_query.nil?
      query_params["phone_number_query"] = phone_number_query.to_s unless phone_number_query.nil?
      query_params["username_query"] = username_query.to_s unless username_query.nil?
      query_params["name_query"] = name_query.to_s unless name_query.nil?
      query_params["banned"] = banned.to_s unless banned.nil?
      query_params["last_active_at_before"] = last_active_at_before.to_s unless last_active_at_before.nil?
      query_params["last_active_at_after"] = last_active_at_after.to_s unless last_active_at_after.nil?
      query_params["last_active_at_since"] = last_active_at_since.to_s unless last_active_at_since.nil?
      query_params["created_at_before"] = created_at_before.to_s unless created_at_before.nil?
      query_params["created_at_after"] = created_at_after.to_s unless created_at_after.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "TotalCount"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UsersApi.get_users_count",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#get_users_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return TotalCount.from_json(data), status_code, headers
    end

    # Lock a user
    # Marks the given user as locked, which means they are not allowed to sign in again until the lock expires. Lock duration can be configured in the instance's restrictions settings.
    # @param user_id [String] The ID of the user to lock
    # @return [User]
    def lock_user(user_id : String)
      data, _status_code, _headers = lock_user_with_http_info(user_id)
      data
    end

    # Lock a user
    # Marks the given user as locked, which means they are not allowed to sign in again until the lock expires. Lock duration can be configured in the instance&#39;s restrictions settings.
    # @param user_id [String] The ID of the user to lock
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def lock_user_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.lock_user ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.lock_user")
      end
      # resource path
      local_var_path = "/users/{user_id}/lock".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UsersApi.lock_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#lock_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Set user profile image
    # Update a user's profile image
    # @param user_id [String] The ID of the user to update the profile image for
    # @return [User]
    def set_user_profile_image(user_id : String, file : ::File?)
      data, _status_code, _headers = set_user_profile_image_with_http_info(user_id, file)
      data
    end

    # Set user profile image
    # Update a user&#39;s profile image
    # @param user_id [String] The ID of the user to update the profile image for
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def set_user_profile_image_with_http_info(user_id : String, file : ::File?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.set_user_profile_image ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.set_user_profile_image")
      end
      # resource path
      local_var_path = "/users/{user_id}/profile_image".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"file"] = file unless file.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UsersApi.set_user_profile_image",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#set_user_profile_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Unban a user
    # Removes the ban mark from the given user.
    # @param user_id [String] The ID of the user to unban
    # @return [User]
    def unban_user(user_id : String)
      data, _status_code, _headers = unban_user_with_http_info(user_id)
      data
    end

    # Unban a user
    # Removes the ban mark from the given user.
    # @param user_id [String] The ID of the user to unban
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def unban_user_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.unban_user ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.unban_user")
      end
      # resource path
      local_var_path = "/users/{user_id}/unban".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UsersApi.unban_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#unban_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Unlock a user
    # Removes the lock from the given user.
    # @param user_id [String] The ID of the user to unlock
    # @return [User]
    def unlock_user(user_id : String)
      data, _status_code, _headers = unlock_user_with_http_info(user_id)
      data
    end

    # Unlock a user
    # Removes the lock from the given user.
    # @param user_id [String] The ID of the user to unlock
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def unlock_user_with_http_info(user_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.unlock_user ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.unlock_user")
      end
      # resource path
      local_var_path = "/users/{user_id}/unlock".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UsersApi.unlock_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#unlock_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Update a user
    # Update a user's attributes.  You can set the user's primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively. Both IDs should correspond to verified identifications that belong to the user.  You can remove a user's username by setting the username attribute to null or the blank string \"\". This is a destructive action; the identification will be deleted forever. Usernames can be removed only if they are optional in your instance settings and there's at least one other identifier which can be used for authentication.  This endpoint allows changing a user's password. When passing the `password` parameter directly you have two further options. You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`. You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.
    # @param user_id [String] The ID of the user to update
    # @param update_user_request [UpdateUserRequest] 
    # @return [User]
    def update_user(user_id : String, update_user_request : UpdateUserRequest)
      data, _status_code, _headers = update_user_with_http_info(user_id, update_user_request)
      data
    end

    # Update a user
    # Update a user&#39;s attributes.  You can set the user&#39;s primary contact identifiers (email address and phone numbers) by updating the &#x60;primary_email_address_id&#x60; and &#x60;primary_phone_number_id&#x60; attributes respectively. Both IDs should correspond to verified identifications that belong to the user.  You can remove a user&#39;s username by setting the username attribute to null or the blank string \&quot;\&quot;. This is a destructive action; the identification will be deleted forever. Usernames can be removed only if they are optional in your instance settings and there&#39;s at least one other identifier which can be used for authentication.  This endpoint allows changing a user&#39;s password. When passing the &#x60;password&#x60; parameter directly you have two further options. You can ignore the password policy checks for your instance by setting the &#x60;skip_password_checks&#x60; parameter to &#x60;true&#x60;. You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set &#x60;sign_out_of_other_sessions&#x60; to &#x60;true&#x60;.
    # @param user_id [String] The ID of the user to update
    # @param update_user_request [UpdateUserRequest] 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def update_user_with_http_info(user_id : String, update_user_request : UpdateUserRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.update_user ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.update_user")
      end
      # verify the required parameter "update_user_request" is set
      if @api_client.config.client_side_validation && update_user_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_user_request' when calling UsersApi.update_user")
      end
      # resource path
      local_var_path = "/users/{user_id}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_user_request.to_json

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"UsersApi.update_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Merge and update a user's metadata
    # Update a user's metadata attributes by merging existing values with the provided parameters.  This endpoint behaves differently than the *Update a user* endpoint. Metadata values will not be replaced entirely. Instead, a deep merge will be performed. Deep means that any nested JSON objects will be merged as well.  You can remove metadata keys at any level by setting their value to `null`.
    # @param user_id [String] The ID of the user whose metadata will be updated and merged
    # @return [User]
    def update_user_metadata(user_id : String, update_user_metadata_request : UpdateUserMetadataRequest?)
      data, _status_code, _headers = update_user_metadata_with_http_info(user_id, update_user_metadata_request)
      data
    end

    # Merge and update a user&#39;s metadata
    # Update a user&#39;s metadata attributes by merging existing values with the provided parameters.  This endpoint behaves differently than the *Update a user* endpoint. Metadata values will not be replaced entirely. Instead, a deep merge will be performed. Deep means that any nested JSON objects will be merged as well.  You can remove metadata keys at any level by setting their value to &#x60;null&#x60;.
    # @param user_id [String] The ID of the user whose metadata will be updated and merged
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def update_user_metadata_with_http_info(user_id : String, update_user_metadata_request : UpdateUserMetadataRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.update_user_metadata ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.update_user_metadata")
      end
      # resource path
      local_var_path = "/users/{user_id}/metadata".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_user_metadata_request.to_json

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"UsersApi.update_user_metadata",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#update_user_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Delete a user passkey
    # Delete the passkey identification for a given user and notify them through email.
    # @param user_id [String] The ID of the user that owns the passkey identity
    # @param passkey_identification_id [String] The ID of the passkey identity to be deleted
    # @return [DeletedObject]
    def user_passkey_delete(user_id : String, passkey_identification_id : String)
      data, _status_code, _headers = user_passkey_delete_with_http_info(user_id, passkey_identification_id)
      data
    end

    # Delete a user passkey
    # Delete the passkey identification for a given user and notify them through email.
    # @param user_id [String] The ID of the user that owns the passkey identity
    # @param passkey_identification_id [String] The ID of the passkey identity to be deleted
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def user_passkey_delete_with_http_info(user_id : String, passkey_identification_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.user_passkey_delete ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.user_passkey_delete")
      end
      # verify the required parameter "passkey_identification_id" is set
      if @api_client.config.client_side_validation && passkey_identification_id.nil?
        raise ArgumentError.new("Missing the required parameter 'passkey_identification_id' when calling UsersApi.user_passkey_delete")
      end
      # resource path
      local_var_path = "/users/{user_id}/passkeys/{passkey_identification_id}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s)).sub("{" + "passkey_identification_id" + "}", URI.encode_path(passkey_identification_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"UsersApi.user_passkey_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#user_passkey_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Delete a user web3 wallet
    # Delete the web3 wallet identification for a given user.
    # @param user_id [String] The ID of the user that owns the web3 wallet
    # @param web3_wallet_identification_id [String] The ID of the web3 wallet identity to be deleted
    # @return [DeletedObject]
    def user_web3_wallet_delete(user_id : String, web3_wallet_identification_id : String)
      data, _status_code, _headers = user_web3_wallet_delete_with_http_info(user_id, web3_wallet_identification_id)
      data
    end

    # Delete a user web3 wallet
    # Delete the web3 wallet identification for a given user.
    # @param user_id [String] The ID of the user that owns the web3 wallet
    # @param web3_wallet_identification_id [String] The ID of the web3 wallet identity to be deleted
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def user_web3_wallet_delete_with_http_info(user_id : String, web3_wallet_identification_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.user_web3_wallet_delete ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.user_web3_wallet_delete")
      end
      # verify the required parameter "web3_wallet_identification_id" is set
      if @api_client.config.client_side_validation && web3_wallet_identification_id.nil?
        raise ArgumentError.new("Missing the required parameter 'web3_wallet_identification_id' when calling UsersApi.user_web3_wallet_delete")
      end
      # resource path
      local_var_path = "/users/{user_id}/web3_wallets/{web3_wallet_identification_id}".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s)).sub("{" + "web3_wallet_identification_id" + "}", URI.encode_path(web3_wallet_identification_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"UsersApi.user_web3_wallet_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#user_web3_wallet_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Retrieve all invitations for a user
    # Retrieve a paginated list of the user's organization invitations
    # @param user_id [String] The ID of the user whose organization invitations we want to retrieve
    # @return [OrganizationInvitationsWithPublicOrganizationData]
    def users_get_organization_invitations(user_id : String, limit : Int32?, offset : Int32?, status : String?)
      data, _status_code, _headers = users_get_organization_invitations_with_http_info(user_id, limit, offset, status)
      data
    end

    # Retrieve all invitations for a user
    # Retrieve a paginated list of the user&#39;s organization invitations
    # @param user_id [String] The ID of the user whose organization invitations we want to retrieve
    # @return [Array<(OrganizationInvitationsWithPublicOrganizationData, Integer, Hash)>] OrganizationInvitationsWithPublicOrganizationData data, response status code and response headers
    def users_get_organization_invitations_with_http_info(user_id : String, limit : Int32?, offset : Int32?, status : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.users_get_organization_invitations ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.users_get_organization_invitations")
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling UsersApi.users_get_organization_invitations, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling UsersApi.users_get_organization_invitations, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling UsersApi.users_get_organization_invitations, must be greater than or equal to 0.")
      end

      allowable_values = ["pending", "accepted", "revoked"]
      if @api_client.config.client_side_validation && status && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/users/{user_id}/organization_invitations".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["status"] = status.to_s unless status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OrganizationInvitationsWithPublicOrganizationData"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UsersApi.users_get_organization_invitations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#users_get_organization_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationInvitationsWithPublicOrganizationData.from_json(data), status_code, headers
    end

    # Retrieve all memberships for a user
    # Retrieve a paginated list of the user's organization memberships
    # @param user_id [String] The ID of the user whose organization memberships we want to retrieve
    # @return [OrganizationMemberships]
    def users_get_organization_memberships(user_id : String, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = users_get_organization_memberships_with_http_info(user_id, limit, offset)
      data
    end

    # Retrieve all memberships for a user
    # Retrieve a paginated list of the user&#39;s organization memberships
    # @param user_id [String] The ID of the user whose organization memberships we want to retrieve
    # @return [Array<(OrganizationMemberships, Integer, Hash)>] OrganizationMemberships data, response status code and response headers
    def users_get_organization_memberships_with_http_info(user_id : String, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.users_get_organization_memberships ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.users_get_organization_memberships")
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling UsersApi.users_get_organization_memberships, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling UsersApi.users_get_organization_memberships, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling UsersApi.users_get_organization_memberships, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/users/{user_id}/organization_memberships".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OrganizationMemberships"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UsersApi.users_get_organization_memberships",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#users_get_organization_memberships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationMemberships.from_json(data), status_code, headers
    end

    # Verify the password of a user
    # Check that the user's password matches the supplied input. Useful for custom auth flows and re-verification.
    # @param user_id [String] The ID of the user for whom to verify the password
    # @return [VerifyPassword200Response]
    def verify_password(user_id : String, verify_password_request : VerifyPasswordRequest?)
      data, _status_code, _headers = verify_password_with_http_info(user_id, verify_password_request)
      data
    end

    # Verify the password of a user
    # Check that the user&#39;s password matches the supplied input. Useful for custom auth flows and re-verification.
    # @param user_id [String] The ID of the user for whom to verify the password
    # @return [Array<(VerifyPassword200Response, Integer, Hash)>] VerifyPassword200Response data, response status code and response headers
    def verify_password_with_http_info(user_id : String, verify_password_request : VerifyPasswordRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.verify_password ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.verify_password")
      end
      # resource path
      local_var_path = "/users/{user_id}/verify_password".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = verify_password_request.to_json

      # return_type
      return_type = "VerifyPassword200Response"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UsersApi.verify_password",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#verify_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return VerifyPassword200Response.from_json(data), status_code, headers
    end

    # Verify a TOTP or backup code for a user
    # Verify that the provided TOTP or backup code is valid for the user. Verifying a backup code will result it in being consumed (i.e. it will become invalid). Useful for custom auth flows and re-verification.
    # @param user_id [String] The ID of the user for whom to verify the TOTP
    # @return [VerifyTOTP200Response]
    def verify_totp(user_id : String, verify_totp_request : VerifyTOTPRequest?)
      data, _status_code, _headers = verify_totp_with_http_info(user_id, verify_totp_request)
      data
    end

    # Verify a TOTP or backup code for a user
    # Verify that the provided TOTP or backup code is valid for the user. Verifying a backup code will result it in being consumed (i.e. it will become invalid). Useful for custom auth flows and re-verification.
    # @param user_id [String] The ID of the user for whom to verify the TOTP
    # @return [Array<(VerifyTOTP200Response, Integer, Hash)>] VerifyTOTP200Response data, response status code and response headers
    def verify_totp_with_http_info(user_id : String, verify_totp_request : VerifyTOTPRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UsersApi.verify_totp ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling UsersApi.verify_totp")
      end
      # resource path
      local_var_path = "/users/{user_id}/verify_totp".sub("{" + "user_id" + "}", URI.encode_path(user_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = verify_totp_request.to_json

      # return_type
      return_type = "VerifyTOTP200Response"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UsersApi.verify_totp",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UsersApi#verify_totp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return VerifyTOTP200Response.from_json(data), status_code, headers
    end
  end
end
