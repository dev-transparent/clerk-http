# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class SAMLConnectionsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a SAML Connection
    # Create a new SAML Connection.
    # @return [SchemasSAMLConnection]
    def create_saml_connection(create_saml_connection_request : CreateSAMLConnectionRequest?)
      data, _status_code, _headers = create_saml_connection_with_http_info(create_saml_connection_request)
      data
    end

    # Create a SAML Connection
    # Create a new SAML Connection.
    # @return [Array<(SchemasSAMLConnection, Integer, Hash)>] SchemasSAMLConnection data, response status code and response headers
    def create_saml_connection_with_http_info(create_saml_connection_request : CreateSAMLConnectionRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SAMLConnectionsApi.create_saml_connection ..."}
      end
      # resource path
      local_var_path = "/saml_connections"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_saml_connection_request.to_json

      # return_type
      return_type = "SchemasSAMLConnection"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"SAMLConnectionsApi.create_saml_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SAMLConnectionsApi#create_saml_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SchemasSAMLConnection.from_json(data), status_code, headers
    end

    # Delete a SAML Connection
    # Deletes the SAML Connection whose ID matches the provided `id` in the path.
    # @param saml_connection_id [String] The ID of the SAML Connection to delete
    # @return [DeletedObject]
    def delete_saml_connection(saml_connection_id : String)
      data, _status_code, _headers = delete_saml_connection_with_http_info(saml_connection_id)
      data
    end

    # Delete a SAML Connection
    # Deletes the SAML Connection whose ID matches the provided &#x60;id&#x60; in the path.
    # @param saml_connection_id [String] The ID of the SAML Connection to delete
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_saml_connection_with_http_info(saml_connection_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SAMLConnectionsApi.delete_saml_connection ..."}
      end
      # verify the required parameter "saml_connection_id" is set
      if @api_client.config.client_side_validation && saml_connection_id.nil?
        raise ArgumentError.new("Missing the required parameter 'saml_connection_id' when calling SAMLConnectionsApi.delete_saml_connection")
      end
      # resource path
      local_var_path = "/saml_connections/{saml_connection_id}".sub("{" + "saml_connection_id" + "}", URI.encode_path(saml_connection_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"SAMLConnectionsApi.delete_saml_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SAMLConnectionsApi#delete_saml_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Retrieve a SAML Connection by ID
    # Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.
    # @param saml_connection_id [String] The ID of the SAML Connection
    # @return [SchemasSAMLConnection]
    def get_saml_connection(saml_connection_id : String)
      data, _status_code, _headers = get_saml_connection_with_http_info(saml_connection_id)
      data
    end

    # Retrieve a SAML Connection by ID
    # Fetches the SAML Connection whose ID matches the provided &#x60;saml_connection_id&#x60; in the path.
    # @param saml_connection_id [String] The ID of the SAML Connection
    # @return [Array<(SchemasSAMLConnection, Integer, Hash)>] SchemasSAMLConnection data, response status code and response headers
    def get_saml_connection_with_http_info(saml_connection_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SAMLConnectionsApi.get_saml_connection ..."}
      end
      # verify the required parameter "saml_connection_id" is set
      if @api_client.config.client_side_validation && saml_connection_id.nil?
        raise ArgumentError.new("Missing the required parameter 'saml_connection_id' when calling SAMLConnectionsApi.get_saml_connection")
      end
      # resource path
      local_var_path = "/saml_connections/{saml_connection_id}".sub("{" + "saml_connection_id" + "}", URI.encode_path(saml_connection_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SchemasSAMLConnection"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SAMLConnectionsApi.get_saml_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SAMLConnectionsApi#get_saml_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SchemasSAMLConnection.from_json(data), status_code, headers
    end

    # Get a list of SAML Connections for an instance
    # Returns the list of SAML Connections for an instance. Results can be paginated using the optional `limit` and `offset` query parameters. The SAML Connections are ordered by descending creation date and the most recent will be returned first.
    # @return [SAMLConnections]
    def list_saml_connections(limit : Int32?, offset : Int32?, query : String?, order_by : String?, organization_id : Array(String)?)
      data, _status_code, _headers = list_saml_connections_with_http_info(limit, offset, query, order_by, organization_id)
      data
    end

    # Get a list of SAML Connections for an instance
    # Returns the list of SAML Connections for an instance. Results can be paginated using the optional &#x60;limit&#x60; and &#x60;offset&#x60; query parameters. The SAML Connections are ordered by descending creation date and the most recent will be returned first.
    # @return [Array<(SAMLConnections, Integer, Hash)>] SAMLConnections data, response status code and response headers
    def list_saml_connections_with_http_info(limit : Int32?, offset : Int32?, query : String?, order_by : String?, organization_id : Array(String)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SAMLConnectionsApi.list_saml_connections ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling SAMLConnectionsApi.list_saml_connections, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling SAMLConnectionsApi.list_saml_connections, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling SAMLConnectionsApi.list_saml_connections, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/saml_connections"

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["query"] = query.to_s unless query.nil?
      query_params["order_by"] = order_by.to_s unless order_by.nil?
      query_params["organization_id"] = @api_client.build_collection_param(organization_id, :multi)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SAMLConnections"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SAMLConnectionsApi.list_saml_connections",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SAMLConnectionsApi#list_saml_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SAMLConnections.from_json(data), status_code, headers
    end

    # Update a SAML Connection
    # Updates the SAML Connection whose ID matches the provided `id` in the path.
    # @param saml_connection_id [String] The ID of the SAML Connection to update
    # @param update_saml_connection_request [UpdateSAMLConnectionRequest] 
    # @return [SchemasSAMLConnection]
    def update_saml_connection(saml_connection_id : String, update_saml_connection_request : UpdateSAMLConnectionRequest)
      data, _status_code, _headers = update_saml_connection_with_http_info(saml_connection_id, update_saml_connection_request)
      data
    end

    # Update a SAML Connection
    # Updates the SAML Connection whose ID matches the provided &#x60;id&#x60; in the path.
    # @param saml_connection_id [String] The ID of the SAML Connection to update
    # @param update_saml_connection_request [UpdateSAMLConnectionRequest] 
    # @return [Array<(SchemasSAMLConnection, Integer, Hash)>] SchemasSAMLConnection data, response status code and response headers
    def update_saml_connection_with_http_info(saml_connection_id : String, update_saml_connection_request : UpdateSAMLConnectionRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: SAMLConnectionsApi.update_saml_connection ..."}
      end
      # verify the required parameter "saml_connection_id" is set
      if @api_client.config.client_side_validation && saml_connection_id.nil?
        raise ArgumentError.new("Missing the required parameter 'saml_connection_id' when calling SAMLConnectionsApi.update_saml_connection")
      end
      # verify the required parameter "update_saml_connection_request" is set
      if @api_client.config.client_side_validation && update_saml_connection_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_saml_connection_request' when calling SAMLConnectionsApi.update_saml_connection")
      end
      # resource path
      local_var_path = "/saml_connections/{saml_connection_id}".sub("{" + "saml_connection_id" + "}", URI.encode_path(saml_connection_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_saml_connection_request.to_json

      # return_type
      return_type = "SchemasSAMLConnection"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"SAMLConnectionsApi.update_saml_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SAMLConnectionsApi#update_saml_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SchemasSAMLConnection.from_json(data), status_code, headers
    end
  end
end
