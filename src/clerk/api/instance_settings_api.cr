# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class InstanceSettingsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetch the current instance
    # Fetches the current instance
    # @return [ModelInstance]
    def get_instance()
      data, _status_code, _headers = get_instance_with_http_info()
      data
    end

    # Fetch the current instance
    # Fetches the current instance
    # @return [Array<(ModelInstance, Integer, Hash)>] ModelInstance data, response status code and response headers
    def get_instance_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InstanceSettingsApi.get_instance ..."}
      end
      # resource path
      local_var_path = "/instance"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ModelInstance"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InstanceSettingsApi.get_instance",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InstanceSettingsApi#get_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ModelInstance.from_json(data), status_code, headers
    end

    # Update instance settings
    # Updates the settings of an instance
    # @return [nil]
    def update_instance(update_instance_request : UpdateInstanceRequest?)
      update_instance_with_http_info(update_instance_request)
      nil
    end

    # Update instance settings
    # Updates the settings of an instance
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_instance_with_http_info(update_instance_request : UpdateInstanceRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InstanceSettingsApi.update_instance ..."}
      end
      # resource path
      local_var_path = "/instance"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_instance_request.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"InstanceSettingsApi.update_instance",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InstanceSettingsApi#update_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update instance organization settings
    # Updates the organization settings of the instance
    # @return [OrganizationSettings]
    def update_instance_organization_settings(update_instance_organization_settings_request : UpdateInstanceOrganizationSettingsRequest?)
      data, _status_code, _headers = update_instance_organization_settings_with_http_info(update_instance_organization_settings_request)
      data
    end

    # Update instance organization settings
    # Updates the organization settings of the instance
    # @return [Array<(OrganizationSettings, Integer, Hash)>] OrganizationSettings data, response status code and response headers
    def update_instance_organization_settings_with_http_info(update_instance_organization_settings_request : UpdateInstanceOrganizationSettingsRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InstanceSettingsApi.update_instance_organization_settings ..."}
      end
      # resource path
      local_var_path = "/instance/organization_settings"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_instance_organization_settings_request.to_json

      # return_type
      return_type = "OrganizationSettings"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"InstanceSettingsApi.update_instance_organization_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InstanceSettingsApi#update_instance_organization_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationSettings.from_json(data), status_code, headers
    end

    # Update instance restrictions
    # Updates the restriction settings of an instance
    # @return [InstanceRestrictions]
    def update_instance_restrictions(update_instance_restrictions_request : UpdateInstanceRestrictionsRequest?)
      data, _status_code, _headers = update_instance_restrictions_with_http_info(update_instance_restrictions_request)
      data
    end

    # Update instance restrictions
    # Updates the restriction settings of an instance
    # @return [Array<(InstanceRestrictions, Integer, Hash)>] InstanceRestrictions data, response status code and response headers
    def update_instance_restrictions_with_http_info(update_instance_restrictions_request : UpdateInstanceRestrictionsRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InstanceSettingsApi.update_instance_restrictions ..."}
      end
      # resource path
      local_var_path = "/instance/restrictions"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_instance_restrictions_request.to_json

      # return_type
      return_type = "InstanceRestrictions"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"InstanceSettingsApi.update_instance_restrictions",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InstanceSettingsApi#update_instance_restrictions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InstanceRestrictions.from_json(data), status_code, headers
    end
  end
end
