# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class OrganizationInvitationsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create and send an organization invitation
    # Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization. You can specify the `role` for the invited organization member.  New organization invitations get a \"pending\" status until they are revoked by an organization administrator or accepted by the invitee.  The request body supports passing an optional `redirect_url` parameter. When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided. Use this parameter to implement a custom invitation acceptance flow.  You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. That user must be a member with administrator privileges in the organization. Only \"admin\" members can create organization invitations.  You can optionally provide public and private metadata for the organization invitation. The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend. When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
    # @param organization_id [String] The ID of the organization for which to send the invitation
    # @return [OrganizationInvitation]
    def create_organization_invitation(organization_id : String, create_organization_invitation_request : CreateOrganizationInvitationRequest?)
      data, _status_code, _headers = create_organization_invitation_with_http_info(organization_id, create_organization_invitation_request)
      data
    end

    # Create and send an organization invitation
    # Creates a new organization invitation and sends an email to the provided &#x60;email_address&#x60; with a link to accept the invitation and join the organization. You can specify the &#x60;role&#x60; for the invited organization member.  New organization invitations get a \&quot;pending\&quot; status until they are revoked by an organization administrator or accepted by the invitee.  The request body supports passing an optional &#x60;redirect_url&#x60; parameter. When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided. Use this parameter to implement a custom invitation acceptance flow.  You can specify the ID of the user that will send the invitation with the &#x60;inviter_user_id&#x60; parameter. That user must be a member with administrator privileges in the organization. Only \&quot;admin\&quot; members can create organization invitations.  You can optionally provide public and private metadata for the organization invitation. The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend. When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
    # @param organization_id [String] The ID of the organization for which to send the invitation
    # @return [Array<(OrganizationInvitation, Integer, Hash)>] OrganizationInvitation data, response status code and response headers
    def create_organization_invitation_with_http_info(organization_id : String, create_organization_invitation_request : CreateOrganizationInvitationRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationInvitationsApi.create_organization_invitation ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationInvitationsApi.create_organization_invitation")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/invitations".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_organization_invitation_request.to_json

      # return_type
      return_type = "OrganizationInvitation"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"OrganizationInvitationsApi.create_organization_invitation",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationInvitationsApi#create_organization_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationInvitation.from_json(data), status_code, headers
    end

    # Bulk create and send organization invitations
    # Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization. You can specify a different `role` for each invited organization member. New organization invitations get a \"pending\" status until they are revoked by an organization administrator or accepted by the invitee. The request body supports passing an optional `redirect_url` parameter for each invitation. When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL. Use this parameter to implement a custom invitation acceptance flow. You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation can have a different inviter user. Inviter users must be members with administrator privileges in the organization. Only \"admin\" members can create organization invitations. You can optionally provide public and private metadata for each organization invitation. The public metadata are visible by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend. When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
    # @param organization_id [String] The organization ID.
    # @param create_organization_invitation_request [Array(CreateOrganizationInvitationRequest)] 
    # @return [OrganizationInvitations]
    def create_organization_invitation_bulk(organization_id : String, create_organization_invitation_request : Array(CreateOrganizationInvitationRequest))
      data, _status_code, _headers = create_organization_invitation_bulk_with_http_info(organization_id, create_organization_invitation_request)
      data
    end

    # Bulk create and send organization invitations
    # Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization. You can specify a different &#x60;role&#x60; for each invited organization member. New organization invitations get a \&quot;pending\&quot; status until they are revoked by an organization administrator or accepted by the invitee. The request body supports passing an optional &#x60;redirect_url&#x60; parameter for each invitation. When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL. Use this parameter to implement a custom invitation acceptance flow. You can specify the ID of the user that will send the invitation with the &#x60;inviter_user_id&#x60; parameter. Each invitation can have a different inviter user. Inviter users must be members with administrator privileges in the organization. Only \&quot;admin\&quot; members can create organization invitations. You can optionally provide public and private metadata for each organization invitation. The public metadata are visible by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend. When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
    # @param organization_id [String] The organization ID.
    # @param create_organization_invitation_request [Array(CreateOrganizationInvitationRequest)] 
    # @return [Array<(OrganizationInvitations, Integer, Hash)>] OrganizationInvitations data, response status code and response headers
    def create_organization_invitation_bulk_with_http_info(organization_id : String, create_organization_invitation_request : Array(CreateOrganizationInvitationRequest))
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationInvitationsApi.create_organization_invitation_bulk ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationInvitationsApi.create_organization_invitation_bulk")
      end
      # verify the required parameter "create_organization_invitation_request" is set
      if @api_client.config.client_side_validation && create_organization_invitation_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_organization_invitation_request' when calling OrganizationInvitationsApi.create_organization_invitation_bulk")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/invitations/bulk".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_organization_invitation_request.to_json

      # return_type
      return_type = "OrganizationInvitations"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"OrganizationInvitationsApi.create_organization_invitation_bulk",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationInvitationsApi#create_organization_invitation_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationInvitations.from_json(data), status_code, headers
    end

    # Retrieve an organization invitation by ID
    # Use this request to get an existing organization invitation by ID.
    # @param organization_id [String] The organization ID.
    # @param invitation_id [String] The organization invitation ID.
    # @return [OrganizationInvitation]
    def get_organization_invitation(organization_id : String, invitation_id : String)
      data, _status_code, _headers = get_organization_invitation_with_http_info(organization_id, invitation_id)
      data
    end

    # Retrieve an organization invitation by ID
    # Use this request to get an existing organization invitation by ID.
    # @param organization_id [String] The organization ID.
    # @param invitation_id [String] The organization invitation ID.
    # @return [Array<(OrganizationInvitation, Integer, Hash)>] OrganizationInvitation data, response status code and response headers
    def get_organization_invitation_with_http_info(organization_id : String, invitation_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationInvitationsApi.get_organization_invitation ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationInvitationsApi.get_organization_invitation")
      end
      # verify the required parameter "invitation_id" is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        raise ArgumentError.new("Missing the required parameter 'invitation_id' when calling OrganizationInvitationsApi.get_organization_invitation")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/invitations/{invitation_id}".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s)).sub("{" + "invitation_id" + "}", URI.encode_path(invitation_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OrganizationInvitation"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OrganizationInvitationsApi.get_organization_invitation",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationInvitationsApi#get_organization_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationInvitation.from_json(data), status_code, headers
    end

    # Get a list of organization invitations for the current instance
    # This request returns the list of organization invitations for the instance. Results can be paginated using the optional `limit` and `offset` query parameters. You can filter them by providing the 'status' query parameter, that accepts multiple values. You can change the order by providing the 'order' query parameter, that accepts multiple values. You can filter by the invited user email address providing the `query` query parameter. The organization invitations are ordered by descending creation date by default.
    # @return [OrganizationInvitationsWithPublicOrganizationData]
    def list_instance_organization_invitations(order_by : String?, status : String?, query : String?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_instance_organization_invitations_with_http_info(order_by, status, query, limit, offset)
      data
    end

    # Get a list of organization invitations for the current instance
    # This request returns the list of organization invitations for the instance. Results can be paginated using the optional &#x60;limit&#x60; and &#x60;offset&#x60; query parameters. You can filter them by providing the &#39;status&#39; query parameter, that accepts multiple values. You can change the order by providing the &#39;order&#39; query parameter, that accepts multiple values. You can filter by the invited user email address providing the &#x60;query&#x60; query parameter. The organization invitations are ordered by descending creation date by default.
    # @return [Array<(OrganizationInvitationsWithPublicOrganizationData, Integer, Hash)>] OrganizationInvitationsWithPublicOrganizationData data, response status code and response headers
    def list_instance_organization_invitations_with_http_info(order_by : String?, status : String?, query : String?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationInvitationsApi.list_instance_organization_invitations ..."}
      end
      allowable_values = ["pending", "accepted", "revoked"]
      if @api_client.config.client_side_validation && status && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationInvitationsApi.list_instance_organization_invitations, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationInvitationsApi.list_instance_organization_invitations, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling OrganizationInvitationsApi.list_instance_organization_invitations, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/organization_invitations"

      # query parameters
      query_params = Hash(String, String).new
      query_params["order_by"] = order_by.to_s unless order_by.nil?
      query_params["status"] = status.to_s unless status.nil?
      query_params["query"] = query.to_s unless query.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OrganizationInvitationsWithPublicOrganizationData"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OrganizationInvitationsApi.list_instance_organization_invitations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationInvitationsApi#list_instance_organization_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationInvitationsWithPublicOrganizationData.from_json(data), status_code, headers
    end

    # Get a list of organization invitations
    # This request returns the list of organization invitations. Results can be paginated using the optional `limit` and `offset` query parameters. You can filter them by providing the 'status' query parameter, that accepts multiple values. The organization invitations are ordered by descending creation date. Most recent invitations will be returned first. Any invitations created as a result of an Organization Domain are not included in the results.
    # @param organization_id [String] The organization ID.
    # @return [OrganizationInvitations]
    def list_organization_invitations(organization_id : String, status : String?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_organization_invitations_with_http_info(organization_id, status, limit, offset)
      data
    end

    # Get a list of organization invitations
    # This request returns the list of organization invitations. Results can be paginated using the optional &#x60;limit&#x60; and &#x60;offset&#x60; query parameters. You can filter them by providing the &#39;status&#39; query parameter, that accepts multiple values. The organization invitations are ordered by descending creation date. Most recent invitations will be returned first. Any invitations created as a result of an Organization Domain are not included in the results.
    # @param organization_id [String] The organization ID.
    # @return [Array<(OrganizationInvitations, Integer, Hash)>] OrganizationInvitations data, response status code and response headers
    def list_organization_invitations_with_http_info(organization_id : String, status : String?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationInvitationsApi.list_organization_invitations ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationInvitationsApi.list_organization_invitations")
      end
      allowable_values = ["pending", "accepted", "revoked"]
      if @api_client.config.client_side_validation && status && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationInvitationsApi.list_organization_invitations, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationInvitationsApi.list_organization_invitations, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling OrganizationInvitationsApi.list_organization_invitations, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/organizations/{organization_id}/invitations".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["status"] = status.to_s unless status.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OrganizationInvitations"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OrganizationInvitationsApi.list_organization_invitations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationInvitationsApi#list_organization_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationInvitations.from_json(data), status_code, headers
    end

    # Get a list of pending organization invitations
    # This request returns the list of organization invitations with \"pending\" status. These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet. Results can be paginated using the optional `limit` and `offset` query parameters. The organization invitations are ordered by descending creation date. Most recent invitations will be returned first. Any invitations created as a result of an Organization Domain are not included in the results.
    # @param organization_id [String] The organization ID.
    # @return [OrganizationInvitations]
    def list_pending_organization_invitations(organization_id : String, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_pending_organization_invitations_with_http_info(organization_id, limit, offset)
      data
    end

    # Get a list of pending organization invitations
    # This request returns the list of organization invitations with \&quot;pending\&quot; status. These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet. Results can be paginated using the optional &#x60;limit&#x60; and &#x60;offset&#x60; query parameters. The organization invitations are ordered by descending creation date. Most recent invitations will be returned first. Any invitations created as a result of an Organization Domain are not included in the results.
    # @param organization_id [String] The organization ID.
    # @return [Array<(OrganizationInvitations, Integer, Hash)>] OrganizationInvitations data, response status code and response headers
    def list_pending_organization_invitations_with_http_info(organization_id : String, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationInvitationsApi.list_pending_organization_invitations ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationInvitationsApi.list_pending_organization_invitations")
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationInvitationsApi.list_pending_organization_invitations, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationInvitationsApi.list_pending_organization_invitations, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling OrganizationInvitationsApi.list_pending_organization_invitations, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/organizations/{organization_id}/invitations/pending".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OrganizationInvitations"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OrganizationInvitationsApi.list_pending_organization_invitations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationInvitationsApi#list_pending_organization_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationInvitations.from_json(data), status_code, headers
    end

    # Revoke a pending organization invitation
    # Use this request to revoke a previously issued organization invitation. Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation. Only organization invitations with \"pending\" status can be revoked. The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation. Only users with \"admin\" role can revoke invitations.
    # @param organization_id [String] The organization ID.
    # @param invitation_id [String] The organization invitation ID.
    # @return [OrganizationInvitation]
    def revoke_organization_invitation(organization_id : String, invitation_id : String, revoke_organization_invitation_request : RevokeOrganizationInvitationRequest?)
      data, _status_code, _headers = revoke_organization_invitation_with_http_info(organization_id, invitation_id, revoke_organization_invitation_request)
      data
    end

    # Revoke a pending organization invitation
    # Use this request to revoke a previously issued organization invitation. Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation. Only organization invitations with \&quot;pending\&quot; status can be revoked. The request accepts the &#x60;requesting_user_id&#x60; parameter to specify the user which revokes the invitation. Only users with \&quot;admin\&quot; role can revoke invitations.
    # @param organization_id [String] The organization ID.
    # @param invitation_id [String] The organization invitation ID.
    # @return [Array<(OrganizationInvitation, Integer, Hash)>] OrganizationInvitation data, response status code and response headers
    def revoke_organization_invitation_with_http_info(organization_id : String, invitation_id : String, revoke_organization_invitation_request : RevokeOrganizationInvitationRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationInvitationsApi.revoke_organization_invitation ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationInvitationsApi.revoke_organization_invitation")
      end
      # verify the required parameter "invitation_id" is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        raise ArgumentError.new("Missing the required parameter 'invitation_id' when calling OrganizationInvitationsApi.revoke_organization_invitation")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/invitations/{invitation_id}/revoke".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s)).sub("{" + "invitation_id" + "}", URI.encode_path(invitation_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = revoke_organization_invitation_request.to_json

      # return_type
      return_type = "OrganizationInvitation"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"OrganizationInvitationsApi.revoke_organization_invitation",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationInvitationsApi#revoke_organization_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationInvitation.from_json(data), status_code, headers
    end
  end
end
