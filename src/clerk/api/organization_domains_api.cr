# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class OrganizationDomainsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new organization domain.
    # Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
    # @param organization_id [String] The ID of the organization where the new domain will be created.
    # @param create_organization_domain_request [CreateOrganizationDomainRequest] 
    # @return [OrganizationDomain]
    def create_organization_domain(organization_id : String, create_organization_domain_request : CreateOrganizationDomainRequest)
      data, _status_code, _headers = create_organization_domain_with_http_info(organization_id, create_organization_domain_request)
      data
    end

    # Create a new organization domain.
    # Creates a new organization domain. By default the domain is verified, but can be optionally set to unverified.
    # @param organization_id [String] The ID of the organization where the new domain will be created.
    # @param create_organization_domain_request [CreateOrganizationDomainRequest] 
    # @return [Array<(OrganizationDomain, Integer, Hash)>] OrganizationDomain data, response status code and response headers
    def create_organization_domain_with_http_info(organization_id : String, create_organization_domain_request : CreateOrganizationDomainRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationDomainsApi.create_organization_domain ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationDomainsApi.create_organization_domain")
      end
      # verify the required parameter "create_organization_domain_request" is set
      if @api_client.config.client_side_validation && create_organization_domain_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_organization_domain_request' when calling OrganizationDomainsApi.create_organization_domain")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/domains".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_organization_domain_request.to_json

      # return_type
      return_type = "OrganizationDomain"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"OrganizationDomainsApi.create_organization_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationDomainsApi#create_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationDomain.from_json(data), status_code, headers
    end

    # Remove a domain from an organization.
    # Removes the given domain from the organization.
    # @param organization_id [String] The ID of the organization the domain belongs to
    # @param domain_id [String] The ID of the domain
    # @return [DeletedObject]
    def delete_organization_domain(organization_id : String, domain_id : String)
      data, _status_code, _headers = delete_organization_domain_with_http_info(organization_id, domain_id)
      data
    end

    # Remove a domain from an organization.
    # Removes the given domain from the organization.
    # @param organization_id [String] The ID of the organization the domain belongs to
    # @param domain_id [String] The ID of the domain
    # @return [Array<(DeletedObject, Integer, Hash)>] DeletedObject data, response status code and response headers
    def delete_organization_domain_with_http_info(organization_id : String, domain_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationDomainsApi.delete_organization_domain ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationDomainsApi.delete_organization_domain")
      end
      # verify the required parameter "domain_id" is set
      if @api_client.config.client_side_validation && domain_id.nil?
        raise ArgumentError.new("Missing the required parameter 'domain_id' when calling OrganizationDomainsApi.delete_organization_domain")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/domains/{domain_id}".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s)).sub("{" + "domain_id" + "}", URI.encode_path(domain_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "DeletedObject"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"OrganizationDomainsApi.delete_organization_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationDomainsApi#delete_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletedObject.from_json(data), status_code, headers
    end

    # Get a list of all domains of an organization.
    # Get a list of all domains of an organization.
    # @param organization_id [String] The organization ID.
    # @return [OrganizationDomains]
    def list_organization_domains(organization_id : String, verified : String?, enrollment_mode : String?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = list_organization_domains_with_http_info(organization_id, verified, enrollment_mode, limit, offset)
      data
    end

    # Get a list of all domains of an organization.
    # Get a list of all domains of an organization.
    # @param organization_id [String] The organization ID.
    # @return [Array<(OrganizationDomains, Integer, Hash)>] OrganizationDomains data, response status code and response headers
    def list_organization_domains_with_http_info(organization_id : String, verified : String?, enrollment_mode : String?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationDomainsApi.list_organization_domains ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationDomainsApi.list_organization_domains")
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationDomainsApi.list_organization_domains, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling OrganizationDomainsApi.list_organization_domains, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling OrganizationDomainsApi.list_organization_domains, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/organizations/{organization_id}/domains".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["verified"] = verified.to_s unless verified.nil?
      query_params["enrollment_mode"] = enrollment_mode.to_s unless enrollment_mode.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OrganizationDomains"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"OrganizationDomainsApi.list_organization_domains",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationDomainsApi#list_organization_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationDomains.from_json(data), status_code, headers
    end

    # Update an organization domain.
    # Updates the properties of an existing organization domain.
    # @param organization_id [String] The ID of the organization the domain belongs to
    # @param domain_id [String] The ID of the domain
    # @param update_organization_domain_request [UpdateOrganizationDomainRequest] 
    # @return [OrganizationDomain]
    def update_organization_domain(organization_id : String, domain_id : String, update_organization_domain_request : UpdateOrganizationDomainRequest)
      data, _status_code, _headers = update_organization_domain_with_http_info(organization_id, domain_id, update_organization_domain_request)
      data
    end

    # Update an organization domain.
    # Updates the properties of an existing organization domain.
    # @param organization_id [String] The ID of the organization the domain belongs to
    # @param domain_id [String] The ID of the domain
    # @param update_organization_domain_request [UpdateOrganizationDomainRequest] 
    # @return [Array<(OrganizationDomain, Integer, Hash)>] OrganizationDomain data, response status code and response headers
    def update_organization_domain_with_http_info(organization_id : String, domain_id : String, update_organization_domain_request : UpdateOrganizationDomainRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: OrganizationDomainsApi.update_organization_domain ..."}
      end
      # verify the required parameter "organization_id" is set
      if @api_client.config.client_side_validation && organization_id.nil?
        raise ArgumentError.new("Missing the required parameter 'organization_id' when calling OrganizationDomainsApi.update_organization_domain")
      end
      # verify the required parameter "domain_id" is set
      if @api_client.config.client_side_validation && domain_id.nil?
        raise ArgumentError.new("Missing the required parameter 'domain_id' when calling OrganizationDomainsApi.update_organization_domain")
      end
      # verify the required parameter "update_organization_domain_request" is set
      if @api_client.config.client_side_validation && update_organization_domain_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_organization_domain_request' when calling OrganizationDomainsApi.update_organization_domain")
      end
      # resource path
      local_var_path = "/organizations/{organization_id}/domains/{domain_id}".sub("{" + "organization_id" + "}", URI.encode_path(organization_id.to_s)).sub("{" + "domain_id" + "}", URI.encode_path(domain_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_organization_domain_request.to_json

      # return_type
      return_type = "OrganizationDomain"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"OrganizationDomainsApi.update_organization_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: OrganizationDomainsApi#update_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OrganizationDomain.from_json(data), status_code, headers
    end
  end
end
