# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class ClientsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a client
    # Returns the details of a client.
    # @param client_id [String] Client ID.
    # @return [Client]
    def get_client(client_id : String)
      data, _status_code, _headers = get_client_with_http_info(client_id)
      data
    end

    # Get a client
    # Returns the details of a client.
    # @param client_id [String] Client ID.
    # @return [Array<(Client, Integer, Hash)>] Client data, response status code and response headers
    def get_client_with_http_info(client_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ClientsApi.get_client ..."}
      end
      # verify the required parameter "client_id" is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError.new("Missing the required parameter 'client_id' when calling ClientsApi.get_client")
      end
      # resource path
      local_var_path = "/clients/{client_id}".sub("{" + "client_id" + "}", URI.encode_path(client_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Client"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ClientsApi.get_client",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ClientsApi#get_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Client.from_json(data), status_code, headers
    end

    # List all clients
    # Returns a list of all clients. The clients are returned sorted by creation date, with the newest clients appearing first. Warning: the endpoint is being deprecated and will be removed in future versions.
    # @return [Array(Client)]
    def get_client_list(paginated : Bool?, limit : Int32?, offset : Int32?)
      data, _status_code, _headers = get_client_list_with_http_info(paginated, limit, offset)
      data
    end

    # List all clients
    # Returns a list of all clients. The clients are returned sorted by creation date, with the newest clients appearing first. Warning: the endpoint is being deprecated and will be removed in future versions.
    # @return [Array<(Array(Client), Integer, Hash)>] Array(Client) data, response status code and response headers
    def get_client_list_with_http_info(paginated : Bool?, limit : Int32?, offset : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ClientsApi.get_client_list ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling ClientsApi.get_client_list, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling ClientsApi.get_client_list, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling ClientsApi.get_client_list, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/clients"

      # query parameters
      query_params = Hash(String, String).new
      query_params["paginated"] = paginated.to_s unless paginated.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Client)"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ClientsApi.get_client_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ClientsApi#get_client_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Client).from_json(data), status_code, headers
    end

    # Verify a client
    # Verifies the client in the provided token
    # @return [Client]
    def verify_client(verify_client_request : VerifyClientRequest?)
      data, _status_code, _headers = verify_client_with_http_info(verify_client_request)
      data
    end

    # Verify a client
    # Verifies the client in the provided token
    # @return [Array<(Client, Integer, Hash)>] Client data, response status code and response headers
    def verify_client_with_http_info(verify_client_request : VerifyClientRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ClientsApi.verify_client ..."}
      end
      # resource path
      local_var_path = "/clients/verify"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = verify_client_request.to_json

      # return_type
      return_type = "Client"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ClientsApi.verify_client",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ClientsApi#verify_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Client.from_json(data), status_code, headers
    end
  end
end
