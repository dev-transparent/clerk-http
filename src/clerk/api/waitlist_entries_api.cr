# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class WaitlistEntriesApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a waitlist entry
    # Creates a new waitlist entry for the given email address. If the email address is already on the waitlist, no new entry will be created and the existing waitlist entry will be returned.
    # @return [WaitlistEntry]
    def create_waitlist_entry(create_waitlist_entry_request : CreateWaitlistEntryRequest?)
      data, _status_code, _headers = create_waitlist_entry_with_http_info(create_waitlist_entry_request)
      data
    end

    # Create a waitlist entry
    # Creates a new waitlist entry for the given email address. If the email address is already on the waitlist, no new entry will be created and the existing waitlist entry will be returned.
    # @return [Array<(WaitlistEntry, Integer, Hash)>] WaitlistEntry data, response status code and response headers
    def create_waitlist_entry_with_http_info(create_waitlist_entry_request : CreateWaitlistEntryRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WaitlistEntriesApi.create_waitlist_entry ..."}
      end
      # resource path
      local_var_path = "/waitlist_entries"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_waitlist_entry_request.to_json

      # return_type
      return_type = "WaitlistEntry"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WaitlistEntriesApi.create_waitlist_entry",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WaitlistEntriesApi#create_waitlist_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WaitlistEntry.from_json(data), status_code, headers
    end

    # List all waitlist entries
    # Retrieve a list of waitlist entries for the instance. Entries are ordered by creation date in descending order by default. Supports filtering by email address or status and pagination with limit and offset parameters.
    # @return [ListWaitlistEntries200Response]
    def list_waitlist_entries(limit : Int32?, offset : Int32?, query : String?, status : String?, order_by : String?)
      data, _status_code, _headers = list_waitlist_entries_with_http_info(limit, offset, query, status, order_by)
      data
    end

    # List all waitlist entries
    # Retrieve a list of waitlist entries for the instance. Entries are ordered by creation date in descending order by default. Supports filtering by email address or status and pagination with limit and offset parameters.
    # @return [Array<(ListWaitlistEntries200Response, Integer, Hash)>] ListWaitlistEntries200Response data, response status code and response headers
    def list_waitlist_entries_with_http_info(limit : Int32?, offset : Int32?, query : String?, status : String?, order_by : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WaitlistEntriesApi.list_waitlist_entries ..."}
      end
      if @api_client.config.client_side_validation && !limit.nil? && limit > 500
        raise ArgumentError.new("invalid value for \"limit\" when calling WaitlistEntriesApi.list_waitlist_entries, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling WaitlistEntriesApi.list_waitlist_entries, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !offset.nil? && offset < 0
        raise ArgumentError.new("invalid value for \"offset\" when calling WaitlistEntriesApi.list_waitlist_entries, must be greater than or equal to 0.")
      end

      allowable_values = ["pending", "invited", "completed", "rejected"]
      if @api_client.config.client_side_validation && status && !allowable_values.includes?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/waitlist_entries"

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["query"] = query.to_s unless query.nil?
      query_params["status"] = status.to_s unless status.nil?
      query_params["order_by"] = order_by.to_s unless order_by.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ListWaitlistEntries200Response"

      # auth_names
      auth_names = ["bearerAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WaitlistEntriesApi.list_waitlist_entries",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WaitlistEntriesApi#list_waitlist_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ListWaitlistEntries200Response.from_json(data), status_code, headers
    end
  end
end
