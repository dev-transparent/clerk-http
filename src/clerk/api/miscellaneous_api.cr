# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "uri"

module Clerk
  class MiscellaneousApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns the markup for the interstitial page
    # The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state. It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.
    # @return [nil]
    def get_public_interstitial(frontend_api : String?, frontend_api2 : String?, publishable_key : String?, proxy_url : String?, domain : String?, sign_in_url : String?, use_domain_for_script : Bool?)
      get_public_interstitial_with_http_info(frontend_api, frontend_api2, publishable_key, proxy_url, domain, sign_in_url, use_domain_for_script)
      nil
    end

    # Returns the markup for the interstitial page
    # The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user&#39;s authentication state. It is used by Clerk SDKs when the user&#39;s authentication state cannot be immediately determined.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_public_interstitial_with_http_info(frontend_api : String?, frontend_api2 : String?, publishable_key : String?, proxy_url : String?, domain : String?, sign_in_url : String?, use_domain_for_script : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: MiscellaneousApi.get_public_interstitial ..."}
      end
      # resource path
      local_var_path = "/public/interstitial"

      # query parameters
      query_params = Hash(String, String).new
      query_params["frontendApi"] = frontend_api.to_s unless frontend_api.nil?
      query_params["frontend_api"] = frontend_api2.to_s unless frontend_api2.nil?
      query_params["publishable_key"] = publishable_key.to_s unless publishable_key.nil?
      query_params["proxy_url"] = proxy_url.to_s unless proxy_url.nil?
      query_params["domain"] = domain.to_s unless domain.nil?
      query_params["sign_in_url"] = sign_in_url.to_s unless sign_in_url.nil?
      query_params["use_domain_for_script"] = use_domain_for_script.to_s unless use_domain_for_script.nil?

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"MiscellaneousApi.get_public_interstitial",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MiscellaneousApi#get_public_interstitial\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end
  end
end
