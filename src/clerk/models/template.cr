# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "big"
require "json"
require "time"

module Clerk
  class Template
    include JSON::Serializable

    # Optional properties
    @[JSON::Field(key: "id", type: String?, nillable: true, emit_null: false)]
    property id : String?

    # String representing the object's type. Objects of the same type share the same value. 
    @[JSON::Field(key: "object", type: String?, nillable: true, emit_null: false)]
    property object : String?

    # the id of the instance the template belongs to
    @[JSON::Field(key: "instance_id", type: String?, nillable: true, emit_null: false)]
    property instance_id : String?

    # whether this is a system (default) or user overridden) template
    @[JSON::Field(key: "resource_type", type: String?, nillable: true, emit_null: false)]
    property resource_type : String?

    # whether this is an email or SMS template
    @[JSON::Field(key: "template_type", type: String?, nillable: true, emit_null: false)]
    property template_type : String?

    # user-friendly name of the template
    @[JSON::Field(key: "name", type: String?, nillable: true, emit_null: false)]
    property name : String?

    # machine-friendly name of the template
    @[JSON::Field(key: "slug", type: String?, nillable: true, emit_null: false)]
    property slug : String?

    # position with the listing of templates
    @[JSON::Field(key: "position", type: Int32?, nillable: true, emit_null: false)]
    property position : Int32?

    # whether this template can be reverted to the corresponding system default
    @[JSON::Field(key: "can_revert", type: Bool?, nillable: true, emit_null: false)]
    property can_revert : Bool?

    # whether this template can be deleted
    @[JSON::Field(key: "can_delete", type: Bool?, nillable: true, emit_null: false)]
    property can_delete : Bool?

    # whether this template can be enabled or disabled, true only for notification SMS templates
    @[JSON::Field(key: "can_toggle", type: Bool?, nillable: true, emit_null: false)]
    property can_toggle : Bool?

    # email subject
    @[JSON::Field(key: "subject", type: String?, nillable: true, emit_null: false)]
    property subject : String?

    # the editor markup used to generate the body of the template
    @[JSON::Field(key: "markup", type: String?, nillable: true, emit_null: false)]
    property markup : String?

    # the template body before variable interpolation
    @[JSON::Field(key: "body", type: String?, nillable: true, emit_null: false)]
    property body : String?

    # list of variables that are available for use in the template body
    @[JSON::Field(key: "available_variables", type: Array(String)?, nillable: true, emit_null: false)]
    property available_variables : Array(String)?

    # list of variables that must be contained in the template body
    @[JSON::Field(key: "required_variables", type: Array(String)?, nillable: true, emit_null: false)]
    property required_variables : Array(String)?

    @[JSON::Field(key: "from_email_name", type: String?, nillable: true, emit_null: false)]
    property from_email_name : String?

    @[JSON::Field(key: "reply_to_email_name", type: String?, nillable: true, emit_null: false)]
    property reply_to_email_name : String?

    @[JSON::Field(key: "delivered_by_clerk", type: Bool?, nillable: true, emit_null: false)]
    property delivered_by_clerk : Bool?

    @[JSON::Field(key: "enabled", type: Bool?, nillable: true, emit_null: false)]
    property enabled : Bool?

    # Unix timestamp of last update. 
    @[JSON::Field(key: "updated_at", type: Int64?, nillable: true, emit_null: false)]
    property updated_at : Int64?

    # Unix timestamp of creation. 
    @[JSON::Field(key: "created_at", type: Int64?, nillable: true, emit_null: false)]
    property created_at : Int64?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String?, @object : String?, @instance_id : String?, @resource_type : String?, @template_type : String?, @name : String?, @slug : String?, @position : Int32?, @can_revert : Bool?, @can_delete : Bool?, @can_toggle : Bool?, @subject : String?, @markup : String?, @body : String?, @available_variables : Array(String)?, @required_variables : Array(String)?, @from_email_name : String?, @reply_to_email_name : String?, @delivered_by_clerk : Bool?, @enabled : Bool?, @updated_at : Int64?, @created_at : Int64?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      object_validator = EnumAttributeValidator.new("String", ["template"])
      return false unless object_validator.valid?(@object)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["template"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          object == o.object &&
          instance_id == o.instance_id &&
          resource_type == o.resource_type &&
          template_type == o.template_type &&
          name == o.name &&
          slug == o.slug &&
          position == o.position &&
          can_revert == o.can_revert &&
          can_delete == o.can_delete &&
          can_toggle == o.can_toggle &&
          subject == o.subject &&
          markup == o.markup &&
          body == o.body &&
          available_variables == o.available_variables &&
          required_variables == o.required_variables &&
          from_email_name == o.from_email_name &&
          reply_to_email_name == o.reply_to_email_name &&
          delivered_by_clerk == o.delivered_by_clerk &&
          enabled == o.enabled &&
          updated_at == o.updated_at &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, object, instance_id, resource_type, template_type, name, slug, position, can_revert, can_delete, can_toggle, subject, markup, body, available_variables, required_variables, from_email_name, reply_to_email_name, delivered_by_clerk, enabled, updated_at, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Clerk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
