# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "big"
require "json"
require "time"

module Clerk
  class User
    include JSON::Serializable

    # Optional properties
    @[JSON::Field(key: "id", type: String?, nillable: true, emit_null: false)]
    property id : String?

    # String representing the object's type. Objects of the same type share the same value. 
    @[JSON::Field(key: "object", type: String?, nillable: true, emit_null: false)]
    property object : String?

    @[JSON::Field(key: "external_id", type: String?, nillable: true, emit_null: false)]
    property external_id : String?

    @[JSON::Field(key: "primary_email_address_id", type: String?, nillable: true, emit_null: false)]
    property primary_email_address_id : String?

    @[JSON::Field(key: "primary_phone_number_id", type: String?, nillable: true, emit_null: false)]
    property primary_phone_number_id : String?

    @[JSON::Field(key: "primary_web3_wallet_id", type: String?, nillable: true, emit_null: false)]
    property primary_web3_wallet_id : String?

    @[JSON::Field(key: "username", type: String?, nillable: true, emit_null: false)]
    property username : String?

    @[JSON::Field(key: "first_name", type: String?, nillable: true, emit_null: false)]
    property first_name : String?

    @[JSON::Field(key: "last_name", type: String?, nillable: true, emit_null: false)]
    property last_name : String?

    @[JSON::Field(key: "profile_image_url", type: String?, nillable: true, emit_null: false)]
    property profile_image_url : String?

    @[JSON::Field(key: "image_url", type: String?, nillable: true, emit_null: false)]
    property image_url : String?

    @[JSON::Field(key: "has_image", type: Bool?, nillable: true, emit_null: false)]
    property has_image : Bool?

    @[JSON::Field(key: "public_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property public_metadata : Hash(String, Object)?

    @[JSON::Field(key: "private_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property private_metadata : Hash(String, Object)?

    @[JSON::Field(key: "unsafe_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property unsafe_metadata : Hash(String, Object)?

    @[JSON::Field(key: "email_addresses", type: Array(EmailAddress)?, nillable: true, emit_null: false)]
    property email_addresses : Array(EmailAddress)?

    @[JSON::Field(key: "phone_numbers", type: Array(PhoneNumber)?, nillable: true, emit_null: false)]
    property phone_numbers : Array(PhoneNumber)?

    @[JSON::Field(key: "web3_wallets", type: Array(Web3Wallet)?, nillable: true, emit_null: false)]
    property web3_wallets : Array(Web3Wallet)?

    @[JSON::Field(key: "passkeys", type: Array(SchemasPasskey)?, nillable: true, emit_null: false)]
    property passkeys : Array(SchemasPasskey)?

    @[JSON::Field(key: "password_enabled", type: Bool?, nillable: true, emit_null: false)]
    property password_enabled : Bool?

    @[JSON::Field(key: "two_factor_enabled", type: Bool?, nillable: true, emit_null: false)]
    property two_factor_enabled : Bool?

    @[JSON::Field(key: "totp_enabled", type: Bool?, nillable: true, emit_null: false)]
    property totp_enabled : Bool?

    @[JSON::Field(key: "backup_code_enabled", type: Bool?, nillable: true, emit_null: false)]
    property backup_code_enabled : Bool?

    # Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled. 
    @[JSON::Field(key: "mfa_enabled_at", type: Int64?, nillable: true, emit_null: false)]
    property mfa_enabled_at : Int64?

    # Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again. 
    @[JSON::Field(key: "mfa_disabled_at", type: Int64?, nillable: true, emit_null: false)]
    property mfa_disabled_at : Int64?

    @[JSON::Field(key: "external_accounts", type: Array(ExternalAccountWithVerification)?, nillable: true, emit_null: false)]
    property external_accounts : Array(ExternalAccountWithVerification)?

    @[JSON::Field(key: "saml_accounts", type: Array(SAMLAccount)?, nillable: true, emit_null: false)]
    property saml_accounts : Array(SAMLAccount)?

    # Unix timestamp of last sign-in. 
    @[JSON::Field(key: "last_sign_in_at", type: Int64?, nillable: true, emit_null: false)]
    property last_sign_in_at : Int64?

    # Flag to denote whether user is banned or not. 
    @[JSON::Field(key: "banned", type: Bool?, nillable: true, emit_null: false)]
    property banned : Bool?

    # Flag to denote whether user is currently locked, i.e. restricted from signing in or not. 
    @[JSON::Field(key: "locked", type: Bool?, nillable: true, emit_null: false)]
    property locked : Bool?

    # The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires. 
    @[JSON::Field(key: "lockout_expires_in_seconds", type: Int64?, nillable: true, emit_null: false)]
    property lockout_expires_in_seconds : Int64?

    # The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining. 
    @[JSON::Field(key: "verification_attempts_remaining", type: Int64?, nillable: true, emit_null: false)]
    property verification_attempts_remaining : Int64?

    # Unix timestamp of last update. 
    @[JSON::Field(key: "updated_at", type: Int64?, nillable: true, emit_null: false)]
    property updated_at : Int64?

    # Unix timestamp of creation. 
    @[JSON::Field(key: "created_at", type: Int64?, nillable: true, emit_null: false)]
    property created_at : Int64?

    # If enabled, user can delete themselves via FAPI. 
    @[JSON::Field(key: "delete_self_enabled", type: Bool?, nillable: true, emit_null: false)]
    property delete_self_enabled : Bool?

    # If enabled, user can create organizations via FAPI. 
    @[JSON::Field(key: "create_organization_enabled", type: Bool?, nillable: true, emit_null: false)]
    property create_organization_enabled : Bool?

    # The maximum number of organizations the user can create. 0 means unlimited. 
    @[JSON::Field(key: "create_organizations_limit", type: Int32?, nillable: true, emit_null: false)]
    property create_organizations_limit : Int32?

    # Unix timestamp of the latest session activity, with day precision. 
    @[JSON::Field(key: "last_active_at", type: Int64?, nillable: true, emit_null: false)]
    property last_active_at : Int64?

    # Unix timestamp of when the user accepted the legal requirements. 
    @[JSON::Field(key: "legal_accepted_at", type: Int64?, nillable: true, emit_null: false)]
    property legal_accepted_at : Int64?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String?, @object : String?, @external_id : String?, @primary_email_address_id : String?, @primary_phone_number_id : String?, @primary_web3_wallet_id : String?, @username : String?, @first_name : String?, @last_name : String?, @profile_image_url : String?, @image_url : String?, @has_image : Bool?, @public_metadata : Hash(String, Object)?, @private_metadata : Hash(String, Object)?, @unsafe_metadata : Hash(String, Object)?, @email_addresses : Array(EmailAddress)?, @phone_numbers : Array(PhoneNumber)?, @web3_wallets : Array(Web3Wallet)?, @passkeys : Array(SchemasPasskey)?, @password_enabled : Bool?, @two_factor_enabled : Bool?, @totp_enabled : Bool?, @backup_code_enabled : Bool?, @mfa_enabled_at : Int64?, @mfa_disabled_at : Int64?, @external_accounts : Array(ExternalAccountWithVerification)?, @saml_accounts : Array(SAMLAccount)?, @last_sign_in_at : Int64?, @banned : Bool?, @locked : Bool?, @lockout_expires_in_seconds : Int64?, @verification_attempts_remaining : Int64?, @updated_at : Int64?, @created_at : Int64?, @delete_self_enabled : Bool?, @create_organization_enabled : Bool?, @create_organizations_limit : Int32?, @last_active_at : Int64?, @legal_accepted_at : Int64?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      object_validator = EnumAttributeValidator.new("String", ["user"])
      return false unless object_validator.valid?(@object)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["user"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          object == o.object &&
          external_id == o.external_id &&
          primary_email_address_id == o.primary_email_address_id &&
          primary_phone_number_id == o.primary_phone_number_id &&
          primary_web3_wallet_id == o.primary_web3_wallet_id &&
          username == o.username &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          profile_image_url == o.profile_image_url &&
          image_url == o.image_url &&
          has_image == o.has_image &&
          public_metadata == o.public_metadata &&
          private_metadata == o.private_metadata &&
          unsafe_metadata == o.unsafe_metadata &&
          email_addresses == o.email_addresses &&
          phone_numbers == o.phone_numbers &&
          web3_wallets == o.web3_wallets &&
          passkeys == o.passkeys &&
          password_enabled == o.password_enabled &&
          two_factor_enabled == o.two_factor_enabled &&
          totp_enabled == o.totp_enabled &&
          backup_code_enabled == o.backup_code_enabled &&
          mfa_enabled_at == o.mfa_enabled_at &&
          mfa_disabled_at == o.mfa_disabled_at &&
          external_accounts == o.external_accounts &&
          saml_accounts == o.saml_accounts &&
          last_sign_in_at == o.last_sign_in_at &&
          banned == o.banned &&
          locked == o.locked &&
          lockout_expires_in_seconds == o.lockout_expires_in_seconds &&
          verification_attempts_remaining == o.verification_attempts_remaining &&
          updated_at == o.updated_at &&
          created_at == o.created_at &&
          delete_self_enabled == o.delete_self_enabled &&
          create_organization_enabled == o.create_organization_enabled &&
          create_organizations_limit == o.create_organizations_limit &&
          last_active_at == o.last_active_at &&
          legal_accepted_at == o.legal_accepted_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, object, external_id, primary_email_address_id, primary_phone_number_id, primary_web3_wallet_id, username, first_name, last_name, profile_image_url, image_url, has_image, public_metadata, private_metadata, unsafe_metadata, email_addresses, phone_numbers, web3_wallets, passkeys, password_enabled, two_factor_enabled, totp_enabled, backup_code_enabled, mfa_enabled_at, mfa_disabled_at, external_accounts, saml_accounts, last_sign_in_at, banned, locked, lockout_expires_in_seconds, verification_attempts_remaining, updated_at, created_at, delete_self_enabled, create_organization_enabled, create_organizations_limit, last_active_at, legal_accepted_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Clerk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
