# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "big"
require "json"
require "time"

module Clerk
  class CreateUserRequest
    include JSON::Serializable

    # Optional properties
    # The ID of the user as used in your external systems or your previous authentication solution. Must be unique across your instance.
    @[JSON::Field(key: "external_id", type: String?, nillable: true, emit_null: false)]
    property external_id : String?

    # The first name to assign to the user
    @[JSON::Field(key: "first_name", type: String?, nillable: true, emit_null: false)]
    property first_name : String?

    # The last name to assign to the user
    @[JSON::Field(key: "last_name", type: String?, nillable: true, emit_null: false)]
    property last_name : String?

    # Email addresses to add to the user. Must be unique across your instance. The first email address will be set as the user's primary email address.
    @[JSON::Field(key: "email_address", type: Array(String)?, nillable: true, emit_null: false)]
    property email_address : Array(String)?

    # Phone numbers to add to the user. Must be unique across your instance. The first phone number will be set as the user's primary phone number.
    @[JSON::Field(key: "phone_number", type: Array(String)?, nillable: true, emit_null: false)]
    property phone_number : Array(String)?

    # Web3 wallets to add to the user. Must be unique across your instance. The first wallet will be set as the user's primary wallet.
    @[JSON::Field(key: "web3_wallet", type: Array(String)?, nillable: true, emit_null: false)]
    property web3_wallet : Array(String)?

    # The username to give to the user. It must be unique across your instance.
    @[JSON::Field(key: "username", type: String?, nillable: true, emit_null: false)]
    property username : String?

    # The plaintext password to give the user. Must be at least 8 characters long, and can not be in any list of hacked passwords.
    @[JSON::Field(key: "password", type: String?, nillable: true, emit_null: false)]
    property password : String?

    # In case you already have the password digests and not the passwords, you can use them for the newly created user via this property. The digests should be generated with one of the supported algorithms. The hashing algorithm can be specified using the `password_hasher` property.
    @[JSON::Field(key: "password_digest", type: String?, nillable: true, emit_null: false)]
    property password_digest : String?

    # The hashing algorithm that was used to generate the password digest.  The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/), [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2), and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.  Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
    @[JSON::Field(key: "password_hasher", type: String?, nillable: true, emit_null: false)]
    property password_hasher : String?

    # When set to `true` all password checks are skipped. It is recommended to use this method only when migrating plaintext passwords to Clerk. Upon migration the user base should be prompted to pick stronger password.
    @[JSON::Field(key: "skip_password_checks", type: Bool?, nillable: true, emit_null: false)]
    property skip_password_checks : Bool?

    # When set to `true`, `password` is not required anymore when creating the user and can be omitted. This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords. Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
    @[JSON::Field(key: "skip_password_requirement", type: Bool?, nillable: true, emit_null: false)]
    property skip_password_requirement : Bool?

    # In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it. Please note that currently the supported options are: * Period: 30 seconds * Code length: 6 digits * Algorithm: SHA1
    @[JSON::Field(key: "totp_secret", type: String?, nillable: true, emit_null: false)]
    property totp_secret : String?

    # If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them. You must provide the backup codes in plain format or the corresponding bcrypt digest.
    @[JSON::Field(key: "backup_codes", type: Array(String)?, nillable: true, emit_null: false)]
    property backup_codes : Array(String)?

    # Metadata saved on the user, that is visible to both your Frontend and Backend APIs
    @[JSON::Field(key: "public_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property public_metadata : Hash(String, Object)?

    # Metadata saved on the user, that is only visible to your Backend API
    @[JSON::Field(key: "private_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property private_metadata : Hash(String, Object)?

    # Metadata saved on the user, that can be updated from both the Frontend and Backend APIs. Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
    @[JSON::Field(key: "unsafe_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property unsafe_metadata : Hash(String, Object)?

    # If enabled, user can delete themselves via FAPI. 
    @[JSON::Field(key: "delete_self_enabled", type: Bool?, nillable: true, emit_null: false)]
    property delete_self_enabled : Bool?

    # A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
    @[JSON::Field(key: "legal_accepted_at", type: String?, nillable: true, emit_null: false)]
    property legal_accepted_at : String?

    # When set to `true` all legal checks are skipped. It is not recommended to skip legal checks unless you are migrating a user to Clerk.
    @[JSON::Field(key: "skip_legal_checks", type: Bool?, nillable: true, emit_null: false)]
    property skip_legal_checks : Bool?

    # If enabled, user can create organizations via FAPI. 
    @[JSON::Field(key: "create_organization_enabled", type: Bool?, nillable: true, emit_null: false)]
    property create_organization_enabled : Bool?

    # The maximum number of organizations the user can create. 0 means unlimited. 
    @[JSON::Field(key: "create_organizations_limit", type: Int32?, nillable: true, emit_null: false)]
    property create_organizations_limit : Int32?

    # A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
    @[JSON::Field(key: "created_at", type: String?, nillable: true, emit_null: false)]
    property created_at : String?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@external_id : String?, @first_name : String?, @last_name : String?, @email_address : Array(String)?, @phone_number : Array(String)?, @web3_wallet : Array(String)?, @username : String?, @password : String?, @password_digest : String?, @password_hasher : String?, @skip_password_checks : Bool?, @skip_password_requirement : Bool?, @totp_secret : String?, @backup_codes : Array(String)?, @public_metadata : Hash(String, Object)?, @private_metadata : Hash(String, Object)?, @unsafe_metadata : Hash(String, Object)?, @delete_self_enabled : Bool?, @legal_accepted_at : String?, @skip_legal_checks : Bool?, @create_organization_enabled : Bool?, @create_organizations_limit : Int32?, @created_at : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          external_id == o.external_id &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          email_address == o.email_address &&
          phone_number == o.phone_number &&
          web3_wallet == o.web3_wallet &&
          username == o.username &&
          password == o.password &&
          password_digest == o.password_digest &&
          password_hasher == o.password_hasher &&
          skip_password_checks == o.skip_password_checks &&
          skip_password_requirement == o.skip_password_requirement &&
          totp_secret == o.totp_secret &&
          backup_codes == o.backup_codes &&
          public_metadata == o.public_metadata &&
          private_metadata == o.private_metadata &&
          unsafe_metadata == o.unsafe_metadata &&
          delete_self_enabled == o.delete_self_enabled &&
          legal_accepted_at == o.legal_accepted_at &&
          skip_legal_checks == o.skip_legal_checks &&
          create_organization_enabled == o.create_organization_enabled &&
          create_organizations_limit == o.create_organizations_limit &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [external_id, first_name, last_name, email_address, phone_number, web3_wallet, username, password, password_digest, password_hasher, skip_password_checks, skip_password_requirement, totp_secret, backup_codes, public_metadata, private_metadata, unsafe_metadata, delete_self_enabled, legal_accepted_at, skip_legal_checks, create_organization_enabled, create_organizations_limit, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Clerk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
