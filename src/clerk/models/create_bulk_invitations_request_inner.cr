# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "big"
require "json"
require "time"

module Clerk
  class CreateBulkInvitationsRequestInner
    include JSON::Serializable

    # Required properties
    # The email address the invitation will be sent to
    @[JSON::Field(key: "email_address", type: String, nillable: false, emit_null: false)]
    property email_address : String

    # Optional properties
    # Metadata that will be attached to the newly created invitation. The value of this property should be a well-formed JSON object. Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
    @[JSON::Field(key: "public_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property public_metadata : Hash(String, Object)?

    # The URL where the user is redirected upon visiting the invitation link, where they can accept the invitation. Required if you have implemented a [custom flow for handling application invitations](/docs/custom-flows/invitations).
    @[JSON::Field(key: "redirect_url", type: String?, nillable: true, emit_null: false)]
    property redirect_url : String?

    # Optional flag which denotes whether an email invitation should be sent to the given email address. Defaults to true.
    @[JSON::Field(key: "notify", type: Bool?, default: true, nillable: true, emit_null: false)]
    property notify : Bool?

    # Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user.
    @[JSON::Field(key: "ignore_existing", type: Bool?, default: false, nillable: true, emit_null: false)]
    property ignore_existing : Bool?

    # The number of days the invitation will be valid for. By default, the invitation expires after 30 days.
    @[JSON::Field(key: "expires_in_days", type: Int32?, nillable: true, emit_null: false)]
    property expires_in_days : Int32?

    # The slug of the email template to use for the invitation email.
    @[JSON::Field(key: "template_slug", type: String?, default: "invitation", nillable: true, emit_null: false)]
    property template_slug : String?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@email_address : String, @public_metadata : Hash(String, Object)?, @redirect_url : String?, @notify : Bool?, @ignore_existing : Bool?, @expires_in_days : Int32?, @template_slug : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@expires_in_days.nil? && @expires_in_days > 365
        invalid_properties.push("invalid value for \"expires_in_days\", must be smaller than or equal to 365.")
      end

      if !@expires_in_days.nil? && @expires_in_days < 1
        invalid_properties.push("invalid value for \"expires_in_days\", must be greater than or equal to 1.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@expires_in_days.nil? && @expires_in_days > 365
      return false if !@expires_in_days.nil? && @expires_in_days < 1
      template_slug_validator = EnumAttributeValidator.new("String", ["invitation", "waitlist_invitation"])
      return false unless template_slug_validator.valid?(@template_slug)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] expires_in_days Value to be assigned
    def expires_in_days=(expires_in_days)
      if !expires_in_days.nil? && expires_in_days > 365
        raise ArgumentError.new("invalid value for \"expires_in_days\", must be smaller than or equal to 365.")
      end

      if !expires_in_days.nil? && expires_in_days < 1
        raise ArgumentError.new("invalid value for \"expires_in_days\", must be greater than or equal to 1.")
      end

      @expires_in_days = expires_in_days
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] template_slug Object to be assigned
    def template_slug=(template_slug)
      validator = EnumAttributeValidator.new("String", ["invitation", "waitlist_invitation"])
      unless validator.valid?(template_slug)
        raise ArgumentError.new("invalid value for \"template_slug\", must be one of #{validator.allowable_values}.")
      end
      @template_slug = template_slug
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          email_address == o.email_address &&
          public_metadata == o.public_metadata &&
          redirect_url == o.redirect_url &&
          notify == o.notify &&
          ignore_existing == o.ignore_existing &&
          expires_in_days == o.expires_in_days &&
          template_slug == o.template_slug
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [email_address, public_metadata, redirect_url, notify, ignore_existing, expires_in_days, template_slug].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Clerk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
