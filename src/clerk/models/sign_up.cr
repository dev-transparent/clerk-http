# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "big"
require "json"
require "time"

module Clerk
  class SignUp
    include JSON::Serializable

    # Required properties
    @[JSON::Field(key: "object", type: String, nillable: false, emit_null: false)]
    property object : String

    @[JSON::Field(key: "id", type: String, nillable: false, emit_null: false)]
    property id : String

    @[JSON::Field(key: "status", type: String, nillable: false, emit_null: false)]
    property status : String

    @[JSON::Field(key: "required_fields", type: Array(String), nillable: false, emit_null: false)]
    property required_fields : Array(String)

    @[JSON::Field(key: "optional_fields", type: Array(String), nillable: false, emit_null: false)]
    property optional_fields : Array(String)

    @[JSON::Field(key: "missing_fields", type: Array(String), nillable: false, emit_null: false)]
    property missing_fields : Array(String)

    @[JSON::Field(key: "unverified_fields", type: Array(String), nillable: false, emit_null: false)]
    property unverified_fields : Array(String)

    @[JSON::Field(key: "verifications", type: SignUpVerifications, nillable: false, emit_null: false)]
    property verifications : SignUpVerifications

    @[JSON::Field(key: "username", type: String, nillable: false, emit_null: false)]
    property username : String

    @[JSON::Field(key: "email_address", type: String, nillable: false, emit_null: false)]
    property email_address : String

    @[JSON::Field(key: "phone_number", type: String, nillable: false, emit_null: false)]
    property phone_number : String

    @[JSON::Field(key: "web3_wallet", type: String, nillable: false, emit_null: false)]
    property web3_wallet : String

    @[JSON::Field(key: "password_enabled", type: Bool, nillable: false, emit_null: false)]
    property password_enabled : Bool

    @[JSON::Field(key: "first_name", type: String, nillable: false, emit_null: false)]
    property first_name : String

    @[JSON::Field(key: "last_name", type: String, nillable: false, emit_null: false)]
    property last_name : String

    @[JSON::Field(key: "custom_action", type: Bool, nillable: false, emit_null: false)]
    property custom_action : Bool

    @[JSON::Field(key: "external_id", type: String, nillable: false, emit_null: false)]
    property external_id : String

    @[JSON::Field(key: "created_session_id", type: String, nillable: false, emit_null: false)]
    property created_session_id : String

    @[JSON::Field(key: "created_user_id", type: String, nillable: false, emit_null: false)]
    property created_user_id : String

    # Unix timestamp at which the user abandoned the sign up attempt. 
    @[JSON::Field(key: "abandon_at", type: Int64, nillable: false, emit_null: false)]
    property abandon_at : Int64

    # Unix timestamp at which the user accepted the legal requirements. 
    @[JSON::Field(key: "legal_accepted_at", type: Int64, nillable: false, emit_null: false)]
    property legal_accepted_at : Int64

    # Optional properties
    @[JSON::Field(key: "unsafe_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property unsafe_metadata : Hash(String, Object)?

    @[JSON::Field(key: "public_metadata", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property public_metadata : Hash(String, Object)?

    @[JSON::Field(key: "external_account", type: Object?, nillable: true, emit_null: false)]
    property external_account : Object?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@object : String, @id : String, @status : String, @required_fields : Array(String), @optional_fields : Array(String), @missing_fields : Array(String), @unverified_fields : Array(String), @verifications : SignUpVerifications, @username : String, @email_address : String, @phone_number : String, @web3_wallet : String, @password_enabled : Bool, @first_name : String, @last_name : String, @custom_action : Bool, @external_id : String, @created_session_id : String, @created_user_id : String, @abandon_at : Int64, @legal_accepted_at : Int64, @unsafe_metadata : Hash(String, Object)?, @public_metadata : Hash(String, Object)?, @external_account : Object?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      object_validator = EnumAttributeValidator.new("String", ["sign_up_attempt"])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new("String", ["missing_requirements", "complete", "abandoned"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["sign_up_attempt"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["missing_requirements", "complete", "abandoned"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          object == o.object &&
          id == o.id &&
          status == o.status &&
          required_fields == o.required_fields &&
          optional_fields == o.optional_fields &&
          missing_fields == o.missing_fields &&
          unverified_fields == o.unverified_fields &&
          verifications == o.verifications &&
          username == o.username &&
          email_address == o.email_address &&
          phone_number == o.phone_number &&
          web3_wallet == o.web3_wallet &&
          password_enabled == o.password_enabled &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          unsafe_metadata == o.unsafe_metadata &&
          public_metadata == o.public_metadata &&
          custom_action == o.custom_action &&
          external_id == o.external_id &&
          created_session_id == o.created_session_id &&
          created_user_id == o.created_user_id &&
          abandon_at == o.abandon_at &&
          legal_accepted_at == o.legal_accepted_at &&
          external_account == o.external_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [object, id, status, required_fields, optional_fields, missing_fields, unverified_fields, verifications, username, email_address, phone_number, web3_wallet, password_enabled, first_name, last_name, unsafe_metadata, public_metadata, custom_action, external_id, created_session_id, created_user_id, abandon_at, legal_accepted_at, external_account].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Clerk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
