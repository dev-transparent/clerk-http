# #Clerk Backend API
#
##The Clerk REST Backend API, meant to be accessed by backend servers.  ### Versions  When the API changes in a way that isn't compatible with older versions, a new version is released. Each version is identified by its release date, e.g. `2025-03-12`. For more information, please see [Clerk API Versions](https://clerk.com/docs/versioning/available-versions).  Please see https://clerk.com/docs for more information.
#
#The version of the OpenAPI document: 2025-03-12
#Contact: support@clerk.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "big"
require "json"
require "time"

module Clerk
  class Session
    include JSON::Serializable

    # Required properties
    # String representing the object's type. Objects of the same type share the same value. 
    @[JSON::Field(key: "object", type: String, nillable: false, emit_null: false)]
    property object : String

    @[JSON::Field(key: "id", type: String, nillable: false, emit_null: false)]
    property id : String

    @[JSON::Field(key: "user_id", type: String, nillable: false, emit_null: false)]
    property user_id : String

    @[JSON::Field(key: "client_id", type: String, nillable: false, emit_null: false)]
    property client_id : String

    @[JSON::Field(key: "status", type: String, nillable: false, emit_null: false)]
    property status : String

    @[JSON::Field(key: "last_active_at", type: Int32, nillable: false, emit_null: false)]
    property last_active_at : Int32

    # Unix timestamp of expiration. 
    @[JSON::Field(key: "expire_at", type: Int64, nillable: false, emit_null: false)]
    property expire_at : Int64

    # Unix timestamp of abandonment. 
    @[JSON::Field(key: "abandon_at", type: Int64, nillable: false, emit_null: false)]
    property abandon_at : Int64

    # Unix timestamp of last update. 
    @[JSON::Field(key: "updated_at", type: Int64, nillable: false, emit_null: false)]
    property updated_at : Int64

    # Unix timestamp of creation. 
    @[JSON::Field(key: "created_at", type: Int64, nillable: false, emit_null: false)]
    property created_at : Int64

    # Optional properties
    @[JSON::Field(key: "actor", type: Object?, nillable: true, emit_null: false)]
    property actor : Object?

    @[JSON::Field(key: "last_active_organization_id", type: String?, nillable: true, emit_null: false)]
    property last_active_organization_id : String?

    @[JSON::Field(key: "latest_activity", type: SessionActivityResponse?, nillable: true, emit_null: false)]
    property latest_activity : SessionActivityResponse?

    @[JSON::Field(key: "tasks", type: Array(SessionTask)?, nillable: true, emit_null: false)]
    property tasks : Array(SessionTask)?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@object : String, @id : String, @user_id : String, @client_id : String, @status : String, @last_active_at : Int32, @expire_at : Int64, @abandon_at : Int64, @updated_at : Int64, @created_at : Int64, @actor : Object?, @last_active_organization_id : String?, @latest_activity : SessionActivityResponse?, @tasks : Array(SessionTask)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      object_validator = EnumAttributeValidator.new("String", ["session"])
      return false unless object_validator.valid?(@object)
      status_validator = EnumAttributeValidator.new("String", ["active", "revoked", "ended", "expired", "removed", "abandoned", "replaced", "pending"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new("String", ["session"])
      unless validator.valid?(object)
        raise ArgumentError.new("invalid value for \"object\", must be one of #{validator.allowable_values}.")
      end
      @object = object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new("String", ["active", "revoked", "ended", "expired", "removed", "abandoned", "replaced", "pending"])
      unless validator.valid?(status)
        raise ArgumentError.new("invalid value for \"status\", must be one of #{validator.allowable_values}.")
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          object == o.object &&
          id == o.id &&
          user_id == o.user_id &&
          client_id == o.client_id &&
          actor == o.actor &&
          status == o.status &&
          last_active_organization_id == o.last_active_organization_id &&
          last_active_at == o.last_active_at &&
          latest_activity == o.latest_activity &&
          expire_at == o.expire_at &&
          abandon_at == o.abandon_at &&
          updated_at == o.updated_at &&
          created_at == o.created_at &&
          tasks == o.tasks
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [object, id, user_id, client_id, actor, status, last_active_organization_id, last_active_at, latest_activity, expire_at, abandon_at, updated_at, created_at, tasks].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Clerk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
